/// These are help comments which appear from little question marks

"use strict";

const annotation_text = "Although annotations play no part in how the model works, they can be used to clarify the meaning behind different elements of the model. Two types of annotations can be added:\n• <b>Labels</b> — These are user-defined text labels that can be positioned anywhere in the model.\n• <b>Bounding boxes</b> — These are labelled boxes which bound selected compartments.";

const class_text = "A classification is a discrete means of differentiating individuals. Typical classifications include disease status, location or sex.\nA classification is given a short but meaningful name (such as 'DS' for 'disease status') and an index. This index is just a single letter and can be used in mathematical equations to represent all the possible values the classification can take.\nA coordinate system is associated with the classification. Cartesian coordinates are used to represent the block style of compartmental model (<i>e.g.</i> the SIR model). Geographic coordinates (which use longitude and latitude) can represent a map-based distribution of points (<i>e.g.</i> farms).\nCloning a classification can be used to copy the compartments in a classification from another species.";

const species_text = "Species group together individuals of different types. In many cases only one species will be present, <i>e.g.</i> people. In other cases, however, different species can interact, <i>e.g.</i> predator-prey models, disease models with vectors included, or models which account for the accumulation of pathogen in the environment (here the pathogen, itself, becomes a species). Two types of model can be set up:\n• <b>Individual-based</b> – Here each individual in the system has its own timeline. This allows for individual-level data (as well as population-level data) to be utilised in inference, as well as enabling the greatest flexibility to define transition distributions. Individual-based models, however, can become computationally slow when they contain many individuals.\n• <b>Population-based</b> – Here the numbers of individuals in different compartments are tracked as a function of time. Only population-level data can be used and transitions are restricted to have only exponential or Erlang distributed waiting times.";

const smoothing_text = "Smoothing applied to a spline implies that consecutive knots are correlated in some way. Two possibilities exist:\n• <b>Normal</b> – Here the expected distribution of the parameter value at one knot on the spline is expected to be normally distributed with respect to the value at the previous knot. The standard deviation of this normal is specified. Note, this approach is appropriate when the parameter can be negative as well as positive.\n• <b>log-normal</b> – Here the expected distribution of the log of the parameter value at one knot on the spline is expected to be normally distributed with respect to the log of the value at the previous knot. The standard deviation of this normal is specified. Note, this approach is appropriate when the parameter is strictly positive.";

const splines_text = "Splines are used to account for time or age variation in model parameters (this is indicated by placing (t) or (a), respectively, after the parameter definition).\nSplines are assumed to be piecewise linear, which means that the parameter value changes linearly between specified time points, otherwise known as 'knots'. If two consecutive knots are set to the same time this can allow for the parameter to undergo a discrete change in value at that time.\nOptionally, smoothing can be added to splines. This is used to represent the fact that time variation in a parameter is not expected to jump drastically in value at consecutive knots, but rather undergo some smooth change.";

const knot_text = "Splines are assumed to be piecewise linear, which means that the parameter value changes linearly between specified time points, otherwise known as 'knots'.\nThis text box is used to set the times of the knots (comma separated). The special key words 'start' and 'end' are used to represent whatever time range is used for the simulation or inference. Intermediate points can be added, <i>e.g.</i> 'start,10,end'.\nIf two consecutive knots are set to the same time this can allow for the parameter to undergo a discrete change in value at that time (even if smoothing is added).";

const compartment_text = "Click here to add a new compartment. Compartments are possible values a classification can take. For example, the classification 'Sex' would contain two compartments: 'M' for male and 'F' for female.";

const compartment_text2 = "Compartments are possible values a classification can take. The name is usually short (conventionally a single upper-case letter), <i>e.g.</i> 'S' to represent susceptible individuals.\nThe colour of the compartment can be selected (by convention this is green for 'S', red for 'I' etc..). These colours are used for plotting population graphs when results are generated.\nThe position of the compartment can be fixed by selecting the checkbox, otherwise it can be dragged around the model with the cursor.\nIn cases in which multiple exponential transitions leave the compartment, the 'Add branching probability' checkbox allows the user to select whether or not branching probabilities are implemented.";

const trans_text = "Click here to add a new transition. Transitions allow for individuals to move from one compartment to another.\nFor example, when an individual becomes infected it could move from a susceptible 'S' compartment to an infected 'I' compartment.";

const trans_text2 = "Transitions allow for individuals to move from one compartment (initial) to another (final).\nFor example, when an individual becomes infected it could move from an initial susceptible 'S' compartment to a final infected 'I' compartment.\nDifferent possible probability distributions can be selected for the transition time:\n• <b>exp(rate)</b> – This exponential distribution is specified by a rate.\n• <b>exp(mean)</b> – This exponential distribution is specified by a mean.\n• <b>gamma</b> – The gamma distribution is specified by a mean and coefficient of variation (i.e. standard deviation divided by mean).\n• <b>erlang</b> – The Erlang distribution is specified by a mean and shape (which must be a positive fixed integer).\n• <b>log-normal</b> – The log-normal distribution is specified by a mean and coefficient of variation.\n• <b>weibull</b> – The Weibull distribution is specified by a scale and shape.\nThese quantities are set via user-defined equations. Note, if the species is set to 'population-based' only the 'exp(rate)', 'exp(mean)' or 'erlang' distributions can be selected from.\nIn cases in which multiple transitions leave the initial compartment, a branching probability is also specified that gives the probability of going down this particular branch.";

const source_text = "A source allows for individuals to enter the system (<i>e.g.</i> as a result of births).\nThe probability per unit time (or rate) at which this occurs is determined by a user-defined equation that can contain model parameters, populations and be dependent on other classifications an individual may have.";

const source_text2 = "A source allows for individuals to enter the system (<i>e.g.</i> as a result of births).\nThe probability per unit time (or rate) at which this occurs is determined by a user-defined equation that can contain model parameters, populations and be dependent on other classifications an individual may have.";

const sink_text = "A sink allows for individuals to leave the system (<i>e.g.</i> as a result of deaths).\nThe rate at which this occurs is determined by a user-defined distribution through equations that can contain model parameters, populations and be dependent on other classifications an individual may have.";

const sink_text2 = "A sink allows for individuals to leave the system (<i>e.g.</i> as a result of deaths).\nThe rate at which this occurs is determined by a user-defined distribution through equations that can contain model parameters, populations and be dependent on other classifications an individual may have.\nIn cases in which multiple transitions leave the compartment, a branching probability is specified that gives the probability of going down this sink.";


const constant_text = "Parameters which are set as constant take that value regardless of whether simulation or inference is performed.\nIf a parameter is only set for the purposes of simulation this should be done under the 'Simulation' tab.";

const reparam_text = "Vectors, matrices or tensors can be reparameterised, usually as a way to reduce the overall number of parameters to be estimated.\nThis is achieved by setting the elements of the vector / matrix / tensor to user-defined equations.";

const derived_text = "A derived quantity is functionally related to other model parameters through an equation. Such a quantity usually has some physical meaning (<i>e.g.</i> the reproduction number <e>R_0</e> in an epidemic model is related to the transmission and recovery rates).\nAlternatively, derived quantities can be introduced when measured data relates to these rather than to anything in the model itself.";

const modelparam_text = "This page shows all model parameters. These can optionally be set as constants, defined as being sampled from a distribution, or reparameterised.\nFurthermore, informative derived quantities can be defined which create new parameters that are functionally related to others.";

const population_text = "This table allows details of the population to be specified.\nThe initial population can either be set using the graphical interface or through a file specifying the number of individuals in each of the compartments.\nIn addition, information can be provided about individuals which are added to the system, removed from the system, or who undergo an enforced change in compartmental state.";

const pop_plot_text = "These plots shows how the populations in different compartments vary as a function of time.\nVarious options can be selected from on the right-hand menu (depending on the situation):\n• <b>View</b> - Determines how the results are plotted:\n* <i>Graph (CI)</i> - gives the population mean with shaded regions providing 95% credible intervals.\n* <i>Graph (line)</i> - plots lines for each of the samples.\n* <i>Compartment</i> - plots the model with shading representing the populations in different compartments (e.g. useful for looking at the spatial spread of diease).\n* <i>Data</i> - allows for inferred populations to be compared to measured population data.\n• <b>Sample</b> - Allows for individual samples to be viewed.\n• <b>Species</b> - Select the species being looked at.\n• <b>Classification</b> - Select the classification being looked at. Additional filters can be added (e.g. to view infected individual which are also in a given location).\n• <b>Chain</b> - Select a specific MCMC chain.";

const param_plot_text = "These plots provide visualisations and statistics for the parameter samples.\nVarious options can be selected from on the right-hand menu (depending on the situation):\n• <b>View</b> - This is divided into a number of different possibilities:\n* <i>Univariate</i> - These show results for all univariate parameters in the model.\n* <i>Multivariate</i> - Any parameters which are represented by vectors, matrices or tensors are given a separate section which can be viewed.\n* <i>Scatter</i> - Shows scatter plots of one parameter against another.\n* <i>Correlation</i> - Shows a matrix of correlation coefficients between different model parameters\n* <i>Likelihoods</i> - Shows different likelihoods and the prior (log transformed) which all add up to give the posterior probability.\n• <b>Graph</b> - Provides alternative ways to view the selected parameter:\n* <i>Trace</i> - Shows consecutive parameter samples down an MCMC chain (these are expected to be correlated with sample number).\n* <i>Sample</i> - Provides raw samples for ABC approaches (these are not expected to be correlated with sample number).\n* <i>Distribution</i> - Shows an estimated posterior distribution for a given parameter. This can either be viewed through binning or using kernel density estimation (KDE). \n* <i>Statistics</i> - Provides the posterior mean and 95% credible interval. For MCMC effective sample size (ESS) provides a diagnostic for convergence (above around 200 generally implies convergence). The Gelman-Rubin statistic (GR) can be used to assess the convergence of independent chains (below 1.05 indicates convergence).";

const trans_plot_text = "These plots shows how the rate for a selected transition varies as a function of time.\nVarious options can be selected from on the right-hand menu (depending on the situation):\n• <b>View</b> - Determines how the results are plotted:\n* <i>Graph (CI)</i> - gives the rate mean with shaded regions providing 95% credible intervals.\n* <i>Graph (line)</i> - plots lines for each of the samples.\n* <i>Data</i> - allows for inferred transition rate to be compared to measured population transition data.\n• <b>Sample</b> - Allows for individual samples to be viewed.\n• <b>Species</b> - Select the species being looked at.\n• <b>Classification</b> - Select the classification being looked at. Additional filters can be added (e.g. to view infected individual which are also in a given location).\n• <b>Time-step</b> - Selects the time-step over which rates are estimated.\n• <b>Chain</b> - Select a specific MCMC chain.";

const ind_plot_text = "These plots shows how the compartmental status of different individuals in the system change as a function of time. The colour on the timeline refer to that used for the compartments in the model.\nVarious options can be selected from on the right-hand menu (depending on the situation):\n• <b>View</b> - Determines how the results are plotted:\n* <i>Timeline</i> - gives timelines for each of the individuals in the system.\n* <i>Table</i> - Provides information about each individual (such as fixed effect design matrix or posterior estimates for individual effects).\n• <b>Sample</b> - Allows for individual samples to be viewed.\n• <b>Species</b> - Select the species being looked at.\n• <b>Classification</b> - Select the classification being looked at. Additional filters can be added (e.g. to view infected individual which are also in a given location).\n• <b>Chain</b> - Select a specific MCMC chain.";

const spline_plot_text = "This shows the time variation in any splines defined by the model.";


//const seed_text = "Computer use pseudo-random number generators. These start with a number called a 'seed'. Changing this number 

const init_pop_text = "The initial population can be specified in one of two ways:\n• <b>Graphical interface</b> – Here the initial population is set using the point and click interface.\n• <b>File</b> – A file specifies initial populations.\nThe populations, themselves, can be defined in one of two ways:\n• <b>Focal</b> – Here a 'focal' classification is selected and populations in different compartments are defined for this. For other classifications the percentages of individuals in different compartments are set (note, one compartment is left unspecified because it is automatically calculated such that the total adds up to 100%). This method is approximate in the sense that it relies on distributions across classification being uncorrelated.\n• <b>All</b> – The populations are specified for all possible combinations of compartments across classifications. This method exactly specifies the initial populations.";

const add_ind_text = "This can be used to provided information about individuals which are added to the system.\nThis requires a data table containing at least the following columns: ‘ID’ which is a unique identifier for individuals, ‘t’ the time at which the individual is added, and columns for each classification to denote into which compartment the individuals enter the system.";

const rem_ind_text = "This can be used to provided information about individuals which are removed from the system.\nThis requires a data table containing at least the following columns: ‘ID’ which is a unique identifier for individuals and ‘t’ the times at which individuals are removed.";

const move_ind_text = "This moves individuals from one compartment to another in a specified classification at specified times (note, this movement is enforced and is not as a result of an induced change, as would be modelled by a transition).\nThis requires a data table containing at least the following columns: ‘ID’ which is a unique identifier for individuals, ‘t’ the time at which the individual is moved, ‘From’ giving the compartment from which an individual leaves, and ‘To’ giving the compartment to which an individual is moved to (note, both of these compartments must be in the same classification for all rows in the table).";

const fixed_eff_text = "Fixed effects allow for individual quantities to be incorporated into the model and act as covariates which can modify transition rates, means etc... (these are indicated by triangular brackets within equations).\nLoading covariate information requires a data table containing at least the following columns: ‘ID’ which is a unique identifier for individuals and 'value' which stores the individual covariate.";

const sim_text = "To simulate from the model parameter values need to be specified.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the last automatically set such that probabilities add to one).\nFor parameters defined as being sampled from distributions (in the 'Model' tab), the user can select whether or not to directly set their values or sample as part of the simulation procedure."

const start_sim_text = "This page allows the user to set various options before starting a simulation:\n• <b>Time range</b> – Sets the period over which the simulated results are generated.\n• <b>Simulation number</b> – Sets how many simulations are performed. Because simulations are stochastic, so each will provide a different set of results. Visualising the overall envelope of many simulations can be a useful way to predict probability distributions for future behaviour.\n• <b>Time-step</b> – A finite time-step is used to approximate the governing equations. Smaller provides more accurate results but takes computationally longer. Typically setting this to around 20% of the shortest expected transition period gives fast, accurate results.";

const time_range_text = "Sets the time period over which the simulated results are generated.";

const inf_time_range_text = "Sets the time period over which the inference is performed.";

const acceptance_text = "In this implementation of ABC first samples are generated and then a cut-off in the error function is selected such that the specified fraction of states with higher observation probability are used for the results.\nSetting this value smaller takes longer but yields better results.";

const abcsmc_acceptance_text = "In this implementation of ABC-SMC first samples are generated and then a cut-off in the error function is selected such that the specified fraction of states goes on to the next generation.\nSetting this value smaller takes longer but fewer generations will be required.";

const kernel_text = "Within ABC-SMC particles are selected from the previous generation with their parameter values being perturbed by a kernel. Here the kernel is set to be a multivariate-normal approximation to the posterior scaled by a selected size. A value of a half works well in most cases.";

const sim_num_text = "Sets how many simulations are performed. Because simulations are stochastic, so each will provide a different set of results. Visualising the overall envelope of many simulations can be a useful way to predict probability distributions for future behaviour.";

const sim_timestep = "A finite time-step is used to approximate the governing equations. Smaller provides more accurate results but takes computationally longer. Typically setting this to around 20% of the shortest expected transition period gives fast, accurate results.";

const param_thin_text = "Parameter samples from MCMC are thinned by this factor before they are displayed.\nBecause results from MCMC are correlated, thinning is a way to limit computational memory requirements. A factor of 10 is used by default, but this can be increased if necessary."; 

const state_thin_text = "State samples from MCMC are thinned by this factor before they are displayed.\nBecause results from MCMC are correlated, thinning is a way to limit computational memory requirements. A factor of 100 is used by default, but this can be increased if necessary.\nNote, because the state takes much more memory to store, so the thinning rate is higher."; 


const data_text = "This table shows the data sources used in inference. Different types of data can be added, as selected using the drop-down box in the bottom right-hand corner:\n• <b>Init. Pop.</b> – Provides information about the initial population, as well as any individuals that are added, removed or that are enforced to move compartment.\n• <b>Individual</b> – Individual-level data, such as the times at which individuals undergo a given transition, when they are in a given compartment or disease diagnostic test results.\n• <b>Population</b> – Population-level data, such as time-series compartmental population measurements, or time-series aggregated transition numbers.\n• <b>Capture</b> – Information about 'capture' events with associated trapping probabilities.\n• <b>Genetic</b> – Sequence data from individuals.";

const init_pop_prior_text = "Instead of specifying the initial population (which may be unknown), a prior can be used. Two options are available:\n• <b>Flat</b> – This assumes an equal probability for an individual entering any of the compartmental states.\n• <b>Dirichlet</b> – This assumes the probability of entering different initial compartmental states is given by a Dirichlet distribution.\nThis requires a data table containing at least the following columns: the names of each of the classifications followed by an ‘alpha’ column (the value of alpha divided by the sum of all alphas gives the probability of an individual being in that compartmental state).";

const comp_data_text = "Provides information about the compartment an individual is in at specified time points.\nThis requires a data table containing at least the following columns: ‘ID’ which is a unique identifier for individuals, ‘t’ the time at which the measurement is made, and the name of the classification on which the state measurement is made. The last column contains entries such as ‘S’ to denote the fact that an individual is susceptible at a specified time point.\nThe ‘|’ symbol can be used to indicate the possibility of the individual being in more than one state, <i>e.g.</i> - ‘S|E’ denotes that it is in either the ‘S’ or ‘E’ compartments.\nFurthermore, probability distributions on potential compartmental states can be set in the following way. Supposing an SIR model, then 'S:0|I:0.4|R:0.6' would imply that there is a 40% chance the individual is in compartment 'I' and a 60% chance it is in compartment 'R'. Unspecified compartments are assumed to have a zero probability, and so the previous expression is equivalent to 'I:0.4,R:0.6'.\nProbability distributions are not required to be normalised, and so this is equivalent to 'I:0.2,R:0.3'.\nInstead of numerical values, parameters can be used, <i>e.g.</i> 'I:[p],R:1-[p]'. Here the parameter <i>p</i> can potentially be estimated from the data.";

const trans_data_text = "Provides information about the timings of individual transitions.\nThis requires a data table containing at least the following columns: ‘ID’ which is a unique identifier for individuals and ‘t’ the time at which the individual undergoes the transition.\nThree options exist for the observed time range:\n• <b>All time</b> – This assumes that if the transition occurs within the period of inference it is definitely observed.\n• <b>Specified time range</b> – Sets the period over which transitions are observed (note, unobserved transitions can occur outside this window).\n• <b>Time range in file</b> – The time range over which specific individuals are observed is set in the file (in this case two further columns are added to the data table: ‘start’ and ‘end’).";

const source_data_text = "Provides information about the timings of individuals entering the system through a source transition.\nThis requires a data table containing at least the following columns: ‘ID’ which is a unique identifier for individuals and ‘t’ the time at which the individual enters the system.\nThree options exist for the observed time range:\n• <b>All time</b> – This assumes that if the source addition occurs within the period of inference it is definitely observed.\n• <b>Specified time range</b> – Sets the period over which the source additions are observed (note, unobserved additions can occur outside this window).\n• <b>Time range in file</b> – The time range over which specific individuals are observed is set in the file (in this case two further columns are added to the data table: ‘start’ and ‘end’).";

const sink_data_text = "Provides information about the timings of individuals leaving the system through a sink transition.\nThis requires a data table containing at least the following columns: ‘ID’ which is a unique identifier for individuals and ‘t’ the time at which the individual leaves the system.\nThree options exist for the observed time range:\n• <b>All time</b> – This assumes that if a sink removal occurs within the period of inference it is definitely observed.\n• <b>Specified time range</b> – Sets the period over which the sink removals are observed (note, unobserved removals can occur outside this window).\n• <b>Time range in file</b> – The time range over which specific individuals are observed is set in the file (in this case two further columns are added to the data table: ‘start’ and ‘end’).";

const diag_test_data_text = "Adds disease diagnostic test data to the analysis.\nThis requires a data table containing at least the following columns: ‘ID’ which is a unique identifier for individuals, ‘t’ the time at which the individual is tested and ‘result’ which provides the binary result of the test (i.e. positive or negative).\nThe compartments the test is sensitive to (i.e. likely to generate a positive result) are selected.\nThe sensitivity and specificity of the test are set, either as numerical values or as parameters in the model.\nThe text used to represent 'positive' and 'negative' test results is chosen to agree with the results as shown in the data file.";

const pop_data_text = "Adds population data to the analysis.\nThis requires a data table containing at least the following columns: ‘t’ the time at which the population measurement is made and ‘Population’ which gives the estimated number of individuals.\nThe population under study can be identified for each of the classifications using the following options:\n• <b>All</b> – All individuals within the classification are counted.\n• <b>Compartment</b> – Only selected compartments are included (<i>e.g.</i> only infected individuals in compartment 'I').\n• <b>File</b> – Here the data file contains an additional column (with heading given by the classification name) which specifies the compartments corresponding to that particular observation. Multiple possible compartments are separated by '|' (<i>e.g.</i> 'E|I' would include exposed and infected individuals).\nThe observation model captures errors in the measurement process. Currently BICI supports only a normal error distribution. Three possibilities can be selected from:\n• <b>Normal (specified percentage)</b> – This assumes that each measurement has a normally distributed error with standard deviation set to a percentage of that measurement.\n• <b>Normal (specified SD)</b> – This assumes that each measurement has a normally distributed error with specified standard deviation.\n• <b>Normal (SD specified in file)</b> – The data table contains an additional column ‘sd’ which specifies the standard deviation in the observation model.";

const poptrans_data_text = "Adds aggregated population-level transition data to the analysis (<i>e.g.</i> the number of cases per week).\nThis requires a data table containing at least the following columns: ‘t’ the start time at which the transitions are counted from (the end time is given by the next measurement, which is taken to be consistent across the time series) and ‘Number’ which gives the estimated number of transitions. Either one or multiple transitions can be selected within a given classification.\nIndividuals can be filtered in the other classifications using the following options:\n• <b>All</b> – All individuals within the classification are counted.\n• <b>Compartment</b> – Only individuals in selected compartments are included (<i>e.g.</i> only male individuals in compartment 'M').\n• <b>File</b> – Here the data file contains an additional column (with heading given by the classification name) which specifies the compartment filter corresponding to that particular observation. Multiple possible compartments are separated by '|' (<i>e.g.</i> 'E|I' would include exposed and infected individuals).\nThe observation model captures errors in the measurement process. Currently BICI supports only a normal error distribution. Three possibilities can be selected from:\n• <b>Normal (specified percentage)</b> – This assumes that each measurement has a normally distributed error with standard deviation set to a percentage of that measurement.\n• <b>Normal (specified SD)</b> – This assumes that each measurement has a normally distributed error with specified standard deviation.\n• <b>Normal (SD specified in file)</b> – The data table contains an additional column ‘sd’ which specifies the standard deviation in the observation model.";

const traps_data_text = "Provides information about when trapping campaigns are carried out.\nThis requires a data table containing at least the following columns: 'Name’ gives a unique identifier for a trapping event and ‘t’ the time at which the traps are set.\nWithin a trapping event the population under study can be identified for each of the classifications using the following options:\n• <b>All</b> – All individuals within the classification are potentially trapped.\n• <b>Compartment</b> – Only selected compartments are potentially trapped (<i>e.g.</i> only males in compartment 'M').\n• <b>File</b> – Here the data file contains an additional column (with heading given by the classification name) which specifies the compartments corresponding to that particular trapping event. Multiple possible '|' (<i>e.g.</i> 'E|I' would include exposed and infected individuals).\nA trapping probability (usually specified by a parameter which is estimated from the data) sets the probability an individual is caught within a given trapping event.";

const ind_trap_data_text = "Adds information about which individuals are trapped within a given trapping campaign.\nThis requires a data table containing at least the following columns: ‘ID’ gives a unique name for each individual and ‘Name’ gives the unique name to the trapping event.";

const seq_data_text = "Incorporates genetic sequence data into the analysis.\nThis requires a data table containing at least the following columns: ‘ID’ gives a unique name for each individual, ‘t’ giving the time of the observation and a series of columns giving sequence data which have a specified ‘root’ at the beginning of their column name. Elements of these columns are expected to contain two characters denoting the version of the SNP, <i>e.g.</i> 'AA', 'AB', 'BA', or 'BB'.";

const load_tensor_text = "Load up tensor values from a file.\nThis requires a data table containing columns with headings given by the indices of the tensor and a final 'value' column.";

const load_reparam_text = "Load up reparameterisation equations from a file.\nThis requires a data table containing columns with headings given by the indices of the tensor and a final 'eqn' column.";

const load_priorsplit_text = "Load up priors from a file.\nThis requires a data table containing columns with headings given by the indices of the tensor and a final 'prior' column. Priors are expressed in a concise format, e.g. 'uniform(4,5)' or 'exp(5)'";

const load_distsplit_text = "Load up distributions from a file.\nThis requires a data table containing columns with headings given by the indices of the tensor and a final 'dist' column. Distributions are expressed in a concise format, e.g. 'uniform(4,5)' or 'exp(5)'";

const label_text = "Labels are user-defined text that can be positioned anywhere in the compartmental model.";

const box_text = "Bounding boxes are labelled rectangles which bound selected compartments in the model.";

const edit_anno_text = "Annotations can be selected and deleted from the model.";

const anno_text = "Although annotations play no part in how the model actually works, they can be used to clarity the meaning behind different elements of the model. Two types of annotations can be added:\n• <b>Labels</b> — These are user-defined text labels that can be positioned anywhere in the model.\n• <b>Bounding box</b> — These are labelled boxes which bound selected compartments.";

const setpop_text = "Sets the initial population in this compartment.";

const setpopper_text = "Sets the percentage of the population in this compartment. Note, all but one of the percentages are specified (with the last automatically calculated such that they sum to 100%).";

const setmultipop_text = "Sets the initial population for this combination of compartments.";

const editsimparam_text = "Edit the parameter value.";

const editconstparam_text = "Edit the parameter value (note, constants are fixed for both simulation and inference).";

const editamatrix_text = "Edit element of the A matrix. Note, this matrix is expected to be 1 along the diagonal and smaller than one for other elements.";

const editxvector_text = "Edit element of the X vector.";

const editeqnparam_text = "Edit the equation which provides the reparameterisation.";

const distribution_text = "Setting elements of a parameter vector / matrix / tensor to sampled from a distribution is similar to specifying a prior (and uses the same set of possibilities), but instead of becoming part of the prior the distribution forms part of the hierarchical model.\nTypically the specified distribution might contain further parameters which can be estimated (for example, the standard deviation when adding random effects).";

const editprior_text = "Edit the prior distribution. This can be selected from five different possibilities:\n• <b>uniform</b> – The potential minimum and maximum values for the parameter are specified. A flat prior distribution between these limits is assumed.\n• <b>exp</b> – The exponential distribution with a specified mean (only appropriate if the parameter is strictly positive).\n• <b>normal</b> – The normal distribution with a specified mean and standard deviation.\n• <b>gamma</b> – The gamma distribution with a specified mean and coefficent of variation (for positive parameters only).\n• <b>log-normal</b> – The log-normal distribution with a specified mean and coefficent of variation (for positive parameters only).\n• <b>beta</b> – The beta distribution with specified alpha and beta values (for parameters which go between 0 and 1 only). Note, the distribution mean is given by alpha/(alpha+beta).\n• <b>bernoulli</b> – The Bernoulli distribution with a specified mean (for binary parameters which can have the value 0 or 1).";

const editpriorbp_text = "Edit the prior distribution. For branching probabilities this can be selected from two different possibilities:\n• <b>flat</b> – An uninformative Dirichlet distribution.\n• <b>dirichlet</b> – The Dirichlet distribution with a specified value of alpha (note, the mean branching probability is given by alpha divided by the sum of alphas across all branches).";

const editpriorzeroone_text = "Edit the prior distribution. For quantities between zero and one this can be selected from two different possibilities:\n• <b>flat</b> – A uniform distribution between 0 and 1.\n• <b>beta</b> – The beta distribution with specified alpha and beta values (for parameters which go between 0 and 1 only). Note, the distribution mean is given by alpha/(alpha+beta).";

const editprior_text2 = "This page is used to edit the prior distributions assigned to model parameters. In inference priors are used to encapsulate any previous estimates for parameter values.\nOne common approach is to identify a range of plausible values a given parameter is likely to take (based on expert judgment) and use this to inform a uniform distribution.\nFor most parameters prior distributions can be selected from seven different possibilities:\n• <b>uniform</b> – The potential minimum and maximum values for the parameter are specified. A flat prior distribution between these limits is assumed.\n• <b>exp</b> – The exponential distribution with a specified mean (only appropriate if the parameter is strictly positive).\n• <b>normal</b> – The normal distribution with a specified mean and standard deviation.\n• <b>gamma</b> – The gamma distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>log-normal</b> – The log-normal distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>beta</b> – The beta distribution with a specified alpha and beta values (for parameters which go between 0 and 1 only). Note, the distribution mean is given by alpha/(alpha+beta).\n• <b>bernoulli</b> – The Bernoulli distribution with a specified mean (for binary parameters which can have the value 0 or 1).\nFor branching probabilities two prior possibilities exist:\n• <b>flat</b> – An uninformative Dirichlet distribution.\n• <b>dirichlet</b> – The Dirichlet distribution with a specified value of alpha (note, the mean branching probability is given by alpha divided by the sum of alphas across all branches).\nFor quantities which strictly go from zero to one (e.g. sensitivity or specificity of a diagnostic test or trapping probability), two prior possibilities exist:\n• <b>flat</b> – A uniform distribution between 0 and 1.\n• <b>beta</b> – The beta distribution with specified alpha and beta values (for parameters which go between 0 and 1 only). Note, the distribution mean is given by alpha/(alpha+beta).";

const search_text = "Search for a particular string in a column.\nIf multiple results are returned, these can be iterated through.";

const boundary_text = "On a map a 'boundary' can be used to denote a geographical area. It is made up of one or more polygons with vertices expressed in terms of longitude and latitude coordinates.";
 
const editele_text = "Edit the table element. Note, some table entries are restricted depending on what quantity is being edited (<i>e.g.</i> time must always be a numeric value).";

const replace_text = "Replace one text string with another along a column.";

const order_text = "Order rows based on elements along a column. This ordering can either be performed numerically or alphabetically.";

const deleterows_text = "Delete rows for which a given column value corresponds to a specified string.";

const editcol_text = "BICI provides simple data editing/searching tools:\n• <b>Search</b> – Find rows containing a specified string.\n• <b>Replace</b> – Replace column elements corresponding to one string with another.\n• <b>Delete</b> – Delete rows for which the element contains a specified string.";

const loadcomp_text = "Compartments can directly be loaded into the model from a file.\nThis requires a data table containing a column with heading 'name' giving the name of the compartments to be added.\nFurthermore, the compartment positions can be specified via columns with headings 'x' and 'y' (in cartesian coordinates), or 'lat' and 'long' (in geographic coordinates). Note, in cartesian coordinates positions are automatically allocated if the 'load position data' checkbox is unchecked.\nThe colour of the compartments can be selected or specified individually for each compartment though an additional column in the data file with heading 'colour' (either hexadecimal format, <i>e.g.</i> '#ff0000', or RGB format, <i>e.g.</i> 'rgb(255,0,0) can be used).";

const loadtrans_text = "Transitions can directly be loaded into the model from a file.\nThis requires a data table containing at least the following columns: ‘from’ gives the compartment from which the transition originates, ‘to’ gives the compartment to which the transition ends up. Further columns define quantities for the selected distribution:\n• <b>exp(rate)</b> – For this exponential distribution a 'rate' column is required.\n• <b>exp(mean)</b> – For this exponential distribution a 'mean' column is required.\n• <b>gamma</b> – For the gamma distribution columns 'mean' and coefficient of variation 'cv' are required.\n• <b>erlang</b> – For the Erlang distribution columns 'mean' and 'shape' (which must be a positive integer) are required.\n• <b>log-normal</b> – For the log-normal distribution columns 'mean' and coefficient of variation 'cv' are required.\n• <b>weibull</b> – For the Weibull distribution columns 'scale' and 'shape' are required.";

const loadsource_text = "Sources can directly be loaded into the model from a file.\nThis requires a data table containing at least the following columns: ‘to’ gives the compartment to which individuals enter the system, then further columns define quantities for the selected distribution:\n• <b>exp(rate)</b> – For this exponential distribution a 'rate' column is required.\n• <b>exp(mean)</b> – For this exponential distribution a 'mean' column is required.\n• <b>erlang</b> – For the Erlang distribution columns 'mean' and 'shape' (which must be a positive integer) are required.\nIf the 'load position data' checkbox is selected then the compartmental positions can be specified via columns with headings 'x' and 'y' (in cartesian coordinates), or 'lat' and 'long' (in geographic coordinates). If not selected, the source will appear adjacent to the compartment.";

const loadsink_text = "Sinks can directly be loaded into the model from a file.\nThis requires a data table containing at least the following columns: ‘from’ gives the compartment from which the individuals leave the system, then further columns define quantities for the selected distribution:\n• <b>exp(rate)</b> – For this exponential distribution a 'rate' column is required.\n• <b>exp(mean)</b> – For this exponential distribution a 'mean' column is required.\n• <b>gamma</b> – For the gamma distribution columns 'mean' and coefficient of variation 'cv' are required.\n• <b>erlang</b> – For the Erlang distribution columns 'mean' and 'shape' (which must be a positive integer) are required.\n• <b>log-normal</b> – For the log-normal distribution columns 'mean' and standard deviation 'sd' are required.\n• <b>weibull</b> – For the Weibull distribution columns 'scale' and 'shape' are required.\nIf the 'load position data' checkbox is selected then the compartmental positions can be specified via columns with headings 'x' and 'y' (in cartesian coordinates), or 'lat' and 'long' (in geographic coordinates). If not selected, the sink will appear adjacent to the compartment.";

const file_text = "The following file options are available:\n• <b>Load</b> – This can be used to load a model/analysis in '.bici' format.\n• <b>Save</b> – Saves the model/analysis in '.bici' format using the current path.\n• <b>Save As...</b> – Saves the model/analysis in '.bici' format using a different path.";

const import_text = "The following import options are available:\n• <b>Script</b> – Loads up a model/data using BICI's scripted language (see manual).\n• <b>Compartments</b> – Loads multiple compartments from a file (these compartments are placed into the classification currently being displayed).\n• <b>Comp. Map</b> – Loads multiple compartments represented by geographical boundary data from a geoJSON file.\n• <b>Transitions</b> – Loads multiple transitions from a file.\n• <b>Sources</b> – Loads multiple sources from a file.\n• <b>Sinks</b> – Loads multiple sinks from a file.";

const export_text = "The following export options are available:\n• <b>Script</b> – The current model is converted into a text-based BICI script (this can be edited and reloaded into BICI if required).\n• <b>Graph</b> – Export any graph currently being shown on the screen.\n• <b>Parameters</b> – Export posterior parameter samples.\n• <b>State</b> – Export posterior samples for the system state.";

const desc_text = "BICI allows users to provide a brief description of the model and any analysis performed. This is not only useful to keep track for personal use, but also makes it easier and more transparent for others to understand what has been done.\nThe description can be edited by clicking on the 'Edit' button (note, bullet points are automatically generated for each carriage return in the editable text box)."

const eqn_text = "The equation editor allows the user to express a quantity as an equation (<i>e.g.</i> representing the rate at which an individual passes down a transition).\nThis equation can be made up of:\n• <b>Numbers</b> - Fixed numerical quantities.\n• <b>Parameters</b> – These are denoted by square brackets and typically represented by Greek letters (<i>e.g.</i> [α]). Parameters need to be set under model simulation and can be inferred from data (assuming a specified prior).\n• <b>Populations</b> – These are denoted by curly brackets and represent the number of individuals within a sub-population of specified compartments (<i>e.g.</i> {I} may represent the total number of infected individuals).\n• <b>Individual effects</b> – These are denoted by triangular brackets (<i>e.g.</i> <g>) and allow for individual based variation.\nQuantities are combined using standard operators: '*' for times, '/' for divided, '+' for addition and '-' for subtraction.";

const example_text = "This section introduces some simple examples that demonstrate the versatility of BICI applied to a variety of different models and data scenarios.\nThese examples can be altered or experimented on in any way. Reloading from this homepage will return them to their default settings.";

const sample_text = "MCMC works by generating a series of posterior samples for the model parameters and state.\nBecause these samples are correlated, it is necessary to generate many more samples than needed and then thin the results (a thinning factor of 10 is used by default, but this can be changed under 'further options').";

const abc_sample_text = "This gives the number of independent samples from the posterior approximation (based on the observation probability being above a threshold).";

const abc_gen_text = "ABC-SMC works over a series of generations with each generation giving a better posterior approximation. Typically 5-10 generations are used with each taking computationally longer than the last.";


const further_inf_text = "This page allows the user to set various other options before starting inference.";

const further_sim_text = "This page allows the user to set various other options before starting simulation.";

const indmax_text = "In cases in which one or more species uses an individual-based model, this sets the maximum value of individuals allowed.\nThis is introduced to deal with cases in which individual number diverges."; 

const start_inf_text = "This page allows the user to set various options before starting inference:\n• <b>Time range</b> – Sets the period over which the inference is performed.\n• <b>Time-step</b> – For approximate methods it is often necessary to specify a time-step. This should be chosen to be sufficiently long to allow the algorithm to be fast, but sufficiently short for it to be accurate. A typical compromise would be to set it to around 20% the expected shortest transition distribution mean.\n• <b>Algorithm</b> – Different algorithms can be used to perform inference.\n* <i>DA-MCMC</i> – Data augmentation MCMC provides the most accurate individual-based inference (although it can be slow for many individuals).\n* <i>ABC</i> – Approximate Bayesian Computation. Estimates posterior by simulating from the model and comparing with the data (population-based data only).\n* <i>ABC-SMC</i> – Approximate Bayesian Computation using Sequential Monte Carlo. An improved version of ABC which improves posterior estimates over a series of generations (population-based data only).\n* <i>PMCMC</i> – Particle MCMC targets the true posterior and makes use of multiple 'particles' (stochastic simulations from the model) run in parallel.\n* <i>ABC-MBP</i> – Approximate Bayesian computation using model-based proposals is an approximate method which utilises an 'error function' and constructs the posterior distribution based on successively reducing a threshold maximum error function over a series of generations.\n* <i>PAS-MBP</i> – Particle annealed sampling using model-based proposals is an approximate method which generates a power posterior approximation that get successively closer to the true posterior over a series of generations.\n* <i>Emulation</i> – Here an emulator is used approximate the posterior surface. Can be much faster provided the number of model parameters is not too large.";

const inf_algorithm = "Different algorithms can be used to perform inference.\n• <i>DA-MCMC</i> – Data augmentation MCMC provides the most accurate individual-based inference (although it can be slow for many individuals).\n• <i>ABC</i> – Approximate Bayesian Computation. Estimates posterior by simulating from the model and comparing with the data (population-based data only).\n• <i>ABC-SMC</i> – Approximate Bayesian Computation using Sequential Monte Carlo. An improved version of ABC which improves posterior estimates over a series of generations (population-based data only).\n• <i>PMCMC</i> – Particle MCMC targets the true posterior and makes use of multiple 'particles' (stochastic simulations from the model) run in parallel.\n• <i>ABC-MBP</i> – Approximate Bayesian computation using model-based proposals is an approximate method which utilises an 'error function' and constructs the posterior distribution based on successively reducing a threshold maximum error function over a series of generations.\n• <i>PAS-MBP</i> – Particle annealed sampling using model-based proposals is an approximate method which generates a power posterior approximation that get successively closer to the true posterior over a series of generations.\n• <i>Emulation</i> – Here an emulator is used approximate the posterior surface. Can be much faster provided the number of model parameters is not too large";

const fix_text = "This message indicates that some elements of the model are inconsistent and so need to be addressed before parameters can be specified.\nClicking on the 'View' buttons allow the user to jump to the parts of the model which are problematic.";

const edittensor_text = "Values for the tensor can be edited by clicking on the table elements.\nAlternatively, the entire table can be loaded from a file (by clicking 'Load' at the bottom of the page).";

const editreparam_text = "Tensors can be reparameterised, usually as a way to reduce the overall number of parameters to be estimated.\nThis is achieved by setting the elements of the tensor to user-defined equations.\nAlternatively, the entire table can be loaded from a file by clicking 'Load' at the bottom of the page.";

const init_pop_text2 = "This page allows the user to set the initial populations in different model compartments.";

const initpopprior_text = "This page allows the user to set the initial population prior in different model compartments.";

const editpriorsplit_text = "This page allows the user to specify individual priors for each of the elements in the parameter tensor. This can either be done by hand or via loading prior expressions from a file by clicking on the 'Load' button at the bottom of the page.";

const editdistsplit_text = "This page allows the user to specify individual distributions for each of the elements in the parameter tensor. This can either be done by hand or via loading distribution expressions from a file by clicking on the 'Load' button at the bottom of the page.";

const load_initpop_text = "Load up the initial population from a data table. Here columns for each classification must be selected and another column which gives the initial number of individuals within each compartmental combination.";

const load_initpopprior_text = "Load up the initial population prior, taken to be a Dirichelet distribution, from a data table. Here columns for each classification must be selected and another column which gives alpha values (the value of alpha divided by the sum of all alphas gives the probability of an individual being in that compartmental state).";


const load_comp_text = "Compartments can directly be loaded into the model from a file.\n";

const load_compcol_text = "Compartments with associated colours can directly be loaded into the model from a file.\nColumns must be selected giving the name of the compartments to be added and the compartment colour (either hexadecimal format, <i>e.g.</i> '#ff0000', or RGB format, <i>e.g.</i> 'rgb(255,0,0) can be used).";

const load_comppos_text = "Compartments with associated positions can directly be loaded into the model from a file.\nColumns must be selected giving the name of the compartments to be added, then columns giving the x and y position (in cartesian coordinates) or latitude and longitude (in geographic coordinates).";

const load_compposcol_text = "Compartments with associated positions and colours can directly be loaded into the model from a file.\nColumns must be selected giving the name of the compartments to be added, then columns giving the x and y position (in cartesian coordinates) or latitude and longitude (in geographic coordinates), then a column giving colour (either hexadecimal format, <i>e.g.</i> '#ff0000', or RGB format, <i>e.g.</i> 'rgb(255,0,0) can be used).";

const load_compmap_text = "Geographical boundaries used to represent compartments can be loaded via geoJSON format. The boundary data column is automatically selected, but a column giving the compartmental names must be selected.";

const load_compartment_text = "Load up the compartmental status of individuals at different time points from a file.\nThe following columns must be selected: the ID of individuals, the times at which the measurements are made and the compartment the individual resides (given a specified classification).";

const load_population_text = "Load up population data from a file.\nThe following columns must be selected: the time at which the population measurement is made and the population value.";

const load_poptrans_text = "Load up population transition data from a file.\nThe following columns must be selected: the time at which the population measurement is made and the number of transitions until the next time measurement (measurements are assumed to occur at regular intervals).";


const load_add_ind_text = "This can be used to provided information about individuals which are added to the system.\nThe following columns must be selected: one which is a unique identifier for individuals, the time at which the individual is added, and columns for each classification to denote into which compartment the individuals enter the system.";

const load_rem_ind_text = "This can be used to provided information about individuals which are removed from the system.\nThe following columns must be selected: one which is a unique identifier for individuals and the times at which individuals are removed.";

const load_move_ind_text = "This moves individuals into different compartments in a specified classification at specified times (note, this movement is enforced and is not as a result of an induced change, as would be modelled by a transition).\nThe following columns must be selected: A unique identifier for individuals, the times at which individuals are moved, and the compartment to which the individuals are moved to (note, both of these compartments must be in the same classification for all rows in the table).";

const load_tensor_text2 = "Load up tensor values from a file.\nThis requires selecting columns with headings given by the indices of the tensor and a final column giving the value of the tensor.";

const load_reparam_text2 = "Load up reparameterisation equations from a file.\nThis requires a data table containing columns with headings given by the indices of the tensor and a final 'eqn' column.";

const load_priorsplit_text2 = "Load up priors from a file.\nThis requires a data table containing columns with headings given by the indices of the tensor and a final 'prior' column. Priors are expressed in a concise format, e.g. 'uniform(4,5)' or 'exp(5)'";

const load_distsplit_text2 = "Load up distributions from a file.\nThis requires a data table containing columns with headings given by the indices of the tensor and a final 'dist' column. Distributions are expressed in a concise format, e.g. 'uniform(4,5)' or 'exp(5)'";

const setderived_text = "A derived quantity is functionally related to other model parameters through an equation. Such a quantity usually has some physical meaning (<i>e.g.</i> the reproduction number R_0 in an epidemic model is related to the transmission and recovery rates).\nIn the left-hand text box place the new parameter and in the right-hand text box write an equation potentially containing model parameters and  populations.";

const uniparam_text = "This shows all the uni-variate parameters in the model.\nOrdinary parameters are black, constants are blue, reparameterised are green, derived are red and those associated with the observation model are brown.\nClicking shows where these parameters appear in the model.";

const paramvector_text = "This shows all the parameter vectors in the model.\nOrdinary parameters are black, constants are blue, reparameterised are green, derived are red and those associated with the observation model are brown.\nClicking shows where these vectors appear in the model.";

const parammatrix_text = "This shows all the parameter matrices in the model.\nOrdinary parameters are black, constants are blue, reparameterised are green, derived are red and those associated with the observation model are brown.\nClicking shows where these matrices appear in the model.";

const paramtensor_text = "This shows all the parameter tensors in the model.\nOrdinary parameters are black, constants are blue, reparameterised are green, derived are red and those associated with the observation model are brown.\nClicking shows where these tensors appear in the model.";

const sim_uni_text = "This shows all the uni-variate parameters in the model which needed to be specified with numeric values. These values must be set before simulation can be performed.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the remaining automatically set such that probabilities add to one). The parameter which is automatically calculated can be altered by clicking on the 'Auto' button.";

const sim_vector_text = "This shows all the parameter vectors in the model which needed to be specified with numeric values.\nThis can be done by clicking on the parameter name and either manually setting each value or loading a file with a vector of constant values.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the remaining automatically set such that probabilities add to one). The parameter which is automatically calculated can be altered by clicking on the 'Auto' button.\nFor parameters defined as being sampled from distributions (in the 'Model' tab), the user can toggle the 'Sample' checkbox to determine whether or not to directly set their values or sample as part of the simulation procedure.";

const sim_matrix_text = "This shows all the parameter matrices in the model which needed to be specified with numeric values.\nThis can be done by clicking on the parameter name and either manually setting each value or loading a file with a matrix of constant values.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the remaining automatically set such that probabilities add to one). The parameter which is automatically calculated can be altered by clicking on the 'Auto' button.\nFor parameters defined as being sampled from distributions (in the 'Model' tab), the user can toggle the 'Sample' checkbox to determine whether or not to directly set their values or sample as part of the simulation procedure.";

const sim_tensor_text = "This shows all the parameter tensors in the model which needed to be specified with numeric values.\nThis can be done by clicking on the parameter name and either manually setting each value or loading a file with tensor element constant values.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the remaining automatically set such that probabilities add to one). The parameter which is automatically calculated can be altered by clicking on the 'Auto' button.\nFor parameters defined as being sampled from distributions (in the 'Model' tab), the user can toggle the 'Sample' checkbox to determine whether or not to directly set their values or sample as part of the simulation procedure.";

const sim_ie_variance_text = "Individual effects allow for individual-based variation in quantities within the model (e.g. to capture variation in susceptibility). They are incorporated into model transitions by enclosing a single letter by square brackets (e.g. [g]).\nIndividual effects are assumed to be log-normally distributed with a mean set to be exactly one and variance which is given by a model parameter. This shows all the parameters associated with individual effects. Here 'Ω' is used to represent the variance of the effect on the log scale and 'ω' the correlation (when two are more individual effects are combined). The superscript denotes the individual effect(s) the parameter is associated with.";

const inf_ie_variance_text = "This shows all the parameters associated with individual effects. Here 'Ω' is used to represent the variance of the effect on the log scale and 'ω' the correlation (when two are more individual effects are combined). The superscript denotes the individual effect(s) the parameter is associated with. Correlations must have a prior which confines them between -1 and 1.";

const corrlation_text = "This option determines if individual correlations are incorporated.\nIf unchecked it means that the individual effects are uncorrelated across individuals.\nIf checked it means that correlations exist. In this case a constant matrix must loaded from a file. This file must have a heading line which contains the IDs of all the individuals in the population and with elements defining a square matrix of correlations.";
 

const inf_uni_text = "This shows all the univariate parameters in the model which needed to be specified with prior distributions. These priors must be set before inference can be performed.";

const inf_vector_text = "This shows all the parameter vectors in the model which needed to be specified with prior distributions. These priors must be set before inference can be performed.\nThis can be done by clicking on the parameter name and either manually setting each one or loading a file with a vector of values (e.g. each containing a text prior specification such as 'normal(0,3)').";

const inf_matrix_text = "This shows all the parameter matrices in the model which needed to be specified with prior distributions. These priors must be set before inference can be performed.\nThis can be done by clicking on the parameter name and either manually setting each one or loading a file with a matrix of values (e.g. each containing a text prior specification such as 'normal(0,3)').";

const inf_tensor_text = "This shows all the parameter tensors in the model which needed to be specified with prior distributions. These priors must be set before inference can be performed.\nThis can be done by clicking on the parameter name and either manually setting each one or loading a file with the tensor element values (e.g. each containing a text prior specification such as 'normal(0,3)').";

const Amatrix_text = "The A matrix gives the covariances which captures correlations between different individual effects in the population. It is a way of estimating genetic contributions to these effects.";
 
 const distmat_text = "Selecting sets this matrix to be given by the distance between compartments.\nIn the case of cartesian coordinates this uses the grid positions as displayed in the visual interface. In the case of longitude and latitude the distance in kilometres is calculated.";
 
 
