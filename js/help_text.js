"use strict";
// These are help comments which appear from little question marks

/// This generates a table for a parameter
function tab_par(type,par)
{
	let prior_pos = ["inverse(0.001,1)","uniform(0,1)","power(0.001,1,-2)","exp(1)","normal(1,0.5)","gamma(1,0.2)","log-normal(1,0.2)","fix(0.2)","uniform(-1,1)","exp(2)","gamma(1,0.2)","uniform(0,0.1)","uniform(0,1)","exp(1)","normal(1,0.5)","gamma(1,0.2)","log-normal(1,0.2)","fix(0.2)","uniform(-1,1)","exp(2)","gamma(1,0.2)","uniform(0,0.1)"];
	
	let dist_pos = ["inverse(a,b)","uniform(a,b)","power(a,b,c)","exp(m)","normal(m,sd)","gamma(m,cv)","log-normal(m,cv)","fix(0.2)","uniform(mi,ma)","exp(\alpha)","gamma(m,cv)","uniform(0,0.1)","uniform(0,1)","exp(1)","normal(1,0.5)","gamma(1,0.2)","log-normal(1,0.2","fix(0.2)","uniform(-1,1)","exp(2)","gamma(1,0.2)","uniform(0,0.1)"];
	
	let eqn_pos = ["1+a","c/d","0","2*a","1+a","c/d","0","2*a","1+a","c/d","0","2*a","1+a","c/d","0","2*a","1+a","c/d","0","2*a","1+a","c/d","0","2*a"];

	let max = 4;
	let max_total = 15;

	let list = par_find_list(par);
	let dim = list.length;
	
	let brev = false;
	
	let N = 1; for(let d = 0; d < dim; d++) N *= list[d].length;
	
	if(N > max_total){
		for(let d = 0; d < dim; d++){
			let li = list[d];
			if(li.length > max){
				brev = true;
				let list_new=[]; 
				for(let k = 0; k < max-1; k++) list_new[k] = li[k];
				list_new[max-1] = "⋮";
				list_new[max] = li[li.length-1];
				list[d] = list_new;
			}
		}		
	}
	
	let co_list = generate_co_list(list);
	
	let tab=[];
	let head=[];
	for(let i = 0; i < dim; i++) head.push(par.dep[i]);
	head.push(type);
	tab.push(head);
	
	let rmax = co_list.length;
	if(rmax > max_total){ brev = true; rmax = max_total;}
	
	let last = false;
	
	for(let r = 0; r < rmax; r++){
		let col = co_list[r];
		let row=[];
		
		let fl = false;
		for(let i = 0; i < dim; i++){
			if(list[i][col.index[i]] == "⋮") fl = true;
		}
		
		if(fl == true){
			if(last == false){
				for(let i = 0; i <= dim; i++) row.push("⋮");
			}
			last = true;
		}
		else{
			for(let i = 0; i < dim; i++){
				row.push(list[i][col.index[i]]);
			}
		
			switch(type){
			case "Value": row.push(poisson_sample(5)); break;
			case "Prior": row.push(prior_pos[r]); break;
			case "Distribution": row.push(dist_pos[r]); break;
			case "Equation": row.push(eqn_pos[r]); break;
			}
			last = false;
		}
		
		if(row.length != 0) tab.push(row);
	}
	
	if(rmax != co_list.length && last == false){
		let row=[];
		for(let i = 0; i <= dim; i++) row.push("⋮");
		tab.push(row);
	}
	
	let te = "A column is specified for each parameter index. Different rows relate to different elements in the parameter. Here each index cycles over its list of possibilities (although the table rows can, in fact, be provided in any order).";
	if(brev) te += "Note, for brevity only selected rows are displayed here. ";
	
	te += "\n";
	
	switch(type){
	case "Value": te += "The 'Value' column sets the values of the parameter elements. Parameter elements are assumed to have a value of zero if not specified in the table. "; break;
	case "Prior": te += "The 'Prior' column sets the priors for the parameter elements. "; break;
	case "Distribution": te += "The 'Distribution' column sets the distributions for the parameter elements. "; break;
	case "Equation": te += "The 'Equation' column sets the reparameterisation equations for the parameter elements. "; break;
	}
	
	return tab_example(tab,te);
}


/// Adds an example to a help description
function tab_example(tab,te)
{
	let st = "\nEXAMPLE – This is an example '.csv' file viewed as a table (in software such as Excel):";
	
	st += "\n<table>";
	for(let j = 0; j < tab.length; j++){
		if(j != 0) st += "&";
		for(let i = 0; i < tab[j].length; i++){
			if(i != 0) st += "|";
			st += tab[j][i];
		}
	}
	
	st += "\n"+te;
	
	return st;
}

const fe_char = "μ";                                    // Character used for fixed effect parameter

const ie_group_name_text = "This name provides a short description of what the individual effects. For example, 'gen' for genetic and 'env' for environmental. The default text 'CM' stands for covariance matrix.";

const exportvideo_text = "Animations can be exported into the '.mv4' video format (this is a commonly supported format and can, <i>e.g.</i>, be used in PowerPoint presentations).\n• <b>Quality</b> — This determines the size of the image exported.\n• <b>Frames per second</b> — Sets how fast the individual frames are played in the final video (the default value corresponds that used in the visual interface).";

const data_source_text = "This name is typically a very short summary of the data source. It is used when referencing data errors or warnings."; 

const load_options_text = "When individual effects are correlated across individuals (<i>e.g.</i> genetically) it is necessary to set up an <b>A</b> relationship matrix. This matrix can be loaded in a number of different ways:\n• <b>A matrix</b> – This is directly loaded by means of a file that has the individuals in the population in the column headers and a square matrix represented in a table.\n• <b>Inverse of A matrix</b> – This loads up the inverse of the relationship matrix by means of a file that has the individuals in the population in the column headers and a square matrix represented in the table.\n• <b>Pedigree</b> – A data table containing at least the following columns: “ID” a unique identifier for individuals, and “sire” and “dam” which give the names of the male and female parents (“.” is used if a parent is not in the data-set).\nMatrix <b>A</b> can also include IDs of individuals who do not appear in the compartmental model itself, and individual effect estimates can be made for these.";
		
const annotation_text = "Although annotations play no part in how the model works, they can be used to clarify the meaning behind different elements of the model. Different types of annotations can be added:\n• <b>Labels</b> — These are user-defined text that can be positioned anywhere in the model.\n• <b>Bounding boxes</b> — These are labelled boxes which bound selected compartments.\n• <b>Maps</b> — A map can be loaded in GeoJSON format (note, this is only available when geographical coordinates are used), <i>e.g.</i> this could be used as a visual reference for farm locations.";

const class_text = "A classification is a discrete means of differentiating individuals. Examples of typical classifications are disease status, location or sex.\nA classification is given a short but meaningful name (such as “DS” for “disease status”) and an index. This index is a single letter and can be used in mathematical equations to represent all the possible values the classification can take.\nA coordinate system is associated with the classification. Cartesian coordinates are used to represent the usual block style of compartmental models (<i>e.g.</i> the SIR model). Geographic coordinates (which use longitude and latitude) can represent a map-based distribution of points (<i>e.g.</i> farms).\nCloning a classification can be used to copy compartments from another species (note, once cloned the two classifications must always share the same compartments but may have different transitions).";

const species_text = "Species group together individuals of the same type. In many cases only one species will be present, <i>e.g.</i> people. In other cases, however, different species can interact, <i>e.g.</i> predator-prey models, disease models with vectors, or models that account for the accumulation of pathogen in the environment (here the pathogen, itself, becomes a species).\nTwo types of model can be set up:\n• <b>Individual-based</b> – Each individual in the system has its own timeline. This allows for individual-level data (as well as population-level data) to be utilised in inference, and enables the greatest flexibility to define transition distributions. Furthermore, the dynamics of individuals can vary (beyond their compartmental classification) thanks to so-called individual or fixed effects. Individual-based models, however, can become computationally slow when they contain many individuals.\n• <b>Population-based</b> – The numbers of individuals in different compartments are tracked as a function of time. Only population-level data can be used and transitions are restricted to have either exponential or Erlang distributed waiting times.";

const smoothing_text = "Smoothing applied to a spline implies that its value at consecutive knots is correlated. Two possibilities exist:\n• <b>Normal</b> – The expected distribution of the parameter value at one knot on the spline is expected to be normally distributed with respect to the value at the previous knot. The standard deviation of this normal is specified. Note, this approach is appropriate when the parameter can be negative as well as positive.\n• <b>log-normal</b> – The expected distribution of the log of the parameter value at one knot on the spline is expected to be normally distributed with respect to the log of the value at the previous knot. The standard deviation of this normal is specified. Note, this approach is appropriate when the parameter is strictly positive.";

const splines_text = "Splines are used to account for time variation in model parameters (this is indicated by placing (t) after the parameter definition).\nSplines are assumed to be piecewise linear, which means the parameter value changes linearly between specified time points, otherwise known as “knots”.\nOptionally, smoothing can be added to splines. This is used to represent the fact that time variation in a parameter is not expected to jump drastically in value at consecutive knots, but rather undergo some smooth change.";

const knot_text = "Splines are assumed to be piecewise linear, which means that the parameter value changes linearly between specified time points, otherwise known as “knots”.\nThis text box is used to set the times of the knots (comma separated). The special key words “start” and “end” are used to represent the time range for simulation or inference. Intermediate points can be added, <i>e.g.</i> “start,10,end” would include a knot at time 10.";

const compartment_text = "Click here to add a new compartment. Compartments are possible states a classification can take. For example, the classification “Sex” would contain two compartments: “M” for male and “F” for female.";

const compartment_text2 = "Compartments are possible states a classification can take. The name is usually short (conventionally a single upper-case letter), <i>e.g.</i> “S” to represent susceptible individuals.\nThe colour of the compartment can be selected (by convention this is green for susceptible “S”, red for infected “I” <i>etc...</i>). These colours are used for plotting population graphs when results are generated.\nThe position of the compartment can be fixed by selecting the checkbox, otherwise it can be dragged on the screen with the cursor.\nWhen multiple exponential transitions leave a compartment, the “Add branching probability” checkbox allows the user to select whether or not branching probabilities are implemented.\nIf branching does occur, the “Use branching factors” checkbox specifies how it is implemented (see manual for details on branching factors).";

const trans_text = "Click here to add a new transition. Transitions allow individuals to move from one compartment to another.\nFor example, when an individual becomes infected it moves from a susceptible “S” compartment to an infected “I” compartment.";

const trans_text2 = "Transitions allow for individuals to move from one compartment (initial) to another (final).\nFor example, when an individual becomes infected it moves from an initial susceptible “S” compartment to a final infected “I” compartment.\nDifferent possible probability distributions can be selected for the transition time:\n• <b>exponential</b> – The exponential distribution is specified by a rate.\n• <b>gamma</b> – The gamma distribution is specified by a mean and coefficient of variation (<i>i.e.</i> standard deviation divided by the mean).\n• <b>erlang</b> – The Erlang distribution is specified by a mean and shape (which must take a positive fixed integer value).\n• <b>log-normal</b> – The log-normal distribution is specified by a mean and coefficient of variation.\n• <b>weibull</b> – The Weibull distribution is specified by a scale and shape.\n• <b>period</b> – The event happens after a certain prescribed period.\nThese quantities are set via user-defined equations. Note if the species is set to “population-based”, only the “exponential” or “erlang” distributions can be selected from.\nIn cases in which multiple transitions leave an initial compartment, a branching probability (or branching factor) is specified that gives the probability of going down a particular branch.";

const source_text = "A source allows for individuals to enter the system (<i>e.g.</i> as a result of births).\nThe probability per unit time (or rate) at which this occurs is determined by a user-defined equation that can contain model parameters, populations and be dependent on other classifications.";

const source_text2 = "A source allows for individuals to enter the system (<i>e.g.</i> as a result of births).\nThe probability per unit time (or rate) at which this occurs is determined by a user-defined equation that can contain model parameters, populations and be dependent on other classifications.";

const sink_text = "A sink allows for individuals to leave the system (<i>e.g.</i> as a result of deaths). Sinks have the same options as for other transitions.";

const sink_text2 = "A sink allows for individuals to leave the system (<i>e.g.</i> as a result of deaths). Sinks have the same options as for other transitions.";

const constant_text = "Parameters that are set as constant take that value regardless of whether simulation or inference is performed.\nIf a parameter is only set for the purposes of simulation this should be done under the “Simulation→Parameter” tab.";

const reparam_text = "Vectors, matrices or tensors can be reparameterised, usually as a way to reduce the overall number of parameters to be estimated.\nThis can be achieved in one of two ways:\n• <b>Equation</b> – Using this option we can set the quantity to a user-defined equation.\n• <b>Split</b> – Each element of the vectors / matrix / tensor can be set to have an equation associated with it.";

const derived_text = "A derived quantity is functionally related to other model parameters through an equation. Such a quantity usually has some physical meaning (<i>e.g.</i> the reproduction number <e>R_0</e> in an epidemic model is related to the transmission and recovery rates).";

const factor_text = "A factor is a way to incorporate a categorical fixed effect into a model (note, if a parameter is set to be a factor, it must have at least one index and cannot be time-varying). It differs from an ordinary parameter because it is defined to have a (potentially weighted) average of exactly one.";

const factor_weight_text = "Setting a parameter as a factor implies that the weighted sum of all the elements is one. If no weight is specified, the weight attributed to each element is the same. On the other hand, a weight implies more emphasis is placed on certain elements."; 

const modelparam_text = "This page shows the model parameters. These can optionally be set as constants, defined as being sampled from a distribution, or reparameterised.\nFurthermore, informative so-called “derived” quantities can be defined which create new parameters that are functionally related to model parameters.";

const initcond_text = "This table allows details of the initial conditions to be specified.\nThe initial population can either be set using the graphical interface or through a file specifying the number of individuals in each of the compartments.\nIn addition, information can be provided about individuals which are added or removed from the system, or who are “moved” (<i>i.e.</i> undergo an enforced change in compartmental state).";

const filter_text = "Filters allow the user to focus on a subset of results of interest. Different sorts of filter apply in different contexts:\n• <b>Population plots</b> – A filter in the classification being viewed can allow for only certain population lines to be plotted (for example, we may wish to focus only on the infected population, with other lines providing a distraction). Clicking on the “Calculate fraction” checkbox means results are shown as a fraction given by the ratio of the population in the select compartment(s) compared to the population in all of them (this is particularly useful for plotting quantities such as the disease prevalence). For other classifications the population under study can be restricted (by selecting a single or multiple compartments). For example the disease status classification could be viewed for just male individuals.\n• <b>Transition plots</b> – Here different transitions can be selected in the classification being viewed, and the population can be filtered in other classifications (as above).\n• <b>Individual plots</b> – As population plots, but here the individual is selected if it visited any of the filtered compartments at any time (and in any posterior/simulation sample).\n• <b>Selected individual plots</b> – These plots show how the probability an individual in different compartments evolves over time (and can be viewed by clicking on the name of the relevant individual). The filter works in the same was as for population plots.";

const filter_pop_incl_text = "This filter allow for only certain population lines to be plotted (for example, we may wish to focus only on the infected population, with other lines providing a distraction).\nClicking on the “Calculate fraction” checkbox means results are shown as a fraction given by the ratio of the population in the select compartment(s) compared to the population in all of them (this is particularly useful for plotting quantities such as the disease prevalence).";

const filter_pop_notincl_text = "For classifications other than the one being viewed, this filter restricts the population under study (by selecting a single or multiple compartments). For example the disease status classification could be viewed for just male individuals.\nClicking on the “Calculate fraction” checkbox means results are shown as a fraction given by the ratio of the population in the select compartment(s) compared to the population in all of them (this is particularly useful for plotting quantities such as the disease prevalence).";

const filter_trans_incl_text = "This filter allow for only certain transition lines to be plotted (for example, we may wish to focus only on the infection transitions, with other lines providing a distraction).";

const filter_trans_notincl_text = "For classifications other than the one being viewed, this filter restricts the population under study (by selecting a single or multiple compartments).\nFor example transitions in disease status could be viewed for just male individuals.";

const filter_ind_incl_text = "This filter allow for only individuals which visit a given subset of compartments (at some time point or in some sample).\nFor example only individuals which become infected could be viewed.";

const filter_ind_notincl_text = "For classifications other than the one being viewed, this filter restricts the individuals to those which visit a given subset of compartments (at some time point or in some sample).\nFor example just male individuals could be viewed.";

const filter_ind_sel_incl_text = "This filter allow for only certain probability lines to be plotted (for example, we may wish to focus only on the probability a specified individual is infected, with other lines providing a distraction).";

const filter_ind_sel_notincl_text = "For classifications other than the one being viewed, this filter restricts the probabilities under study (by selecting a single or multiple compartments). For example the disease status classification probabilities could be viewed for just when an individual is in a specific location.";


const pop_plot_text = "These plots show how the populations in different compartments vary as a function of time.\nVarious options can be selected on the right-hand menu (depending on the situation):\n• <b>View</b> – Determines how the results are plotted:\n* <i>Graph (CI)</i> – Gives the population mean, with shaded regions providing 95% credible intervals.\n* <i>Graph (line)</i> – Plots lines for each sample.\n* <i>Slice</i> – Provides posterior distributions at a specified time.\n* <i>Compartment</i> – Plots the compartmental model with shading representing the population in different compartments (<i>e.g.</i> useful for looking at the spatial spread of disease).\n* <i>Density</i> – Like “Compartment” but expands the shading using Voronoi tessellation (<i>e.g.</i> good when plotting geographical population variation).\n* <i>Data</i> – Allows for inferred populations to be compared to measured population data.\n• <b>Sample</b> – Allows for individual samples to be viewed.\n• <b>Time</b> – Specifies the time used with the “Slice” option.\n• <b>Classification</b> – Select the classification being looked at.\n• <b>Chain</b> – Select a specific MCMC chain.\nThe “Add filter” option allows for population filters to be added (<i>e.g.</i> to focus on individuals at a given location).";

const param_plot_text = "These plots provide visualisations and statistics for the parameter samples.\nVarious options can be selected on the right-hand menu (depending on the situation):\n• <b>View</b> – This is divided into a number of different possibilities:\n* <i>Univariate</i> – These show results for all univariate parameters in the model.\n* <i>Multivariate</i> – Any parameters represented by vectors, matrices or tensors are given a separate section that can be viewed.\n* <i>Scatter</i> – Shows scatter plots of one parameter against another.\n* <i>Correlation</i> – Shows a matrix of correlation coefficients between different model parameters.\n* <i>Likelihoods</i> – Shows different likelihoods and the prior (all log transformed) which add up to give the posterior probability.\n• <b>Graph</b> – Provides alternative ways to view the selected parameter:\n* <i>Trace</i> – Shows consecutive parameter samples down an MCMC chain.\n* <i>Sample</i> – Provides raw samples for ABC approaches.\n* <i>Distribution</i> – Shows an estimated posterior distribution for a given parameter. This can either be viewed through binning or using kernel density estimation (KDE) (selected using the settings button in the bottom left-hand corner). Under inference the Bayes factor, comparing the full model to one in which a parameter value is fixed, can be calculated by clicking on the “BF” button.\n* <i>Statistics</i> – Provides the posterior mean and 95% credible interval. For MCMC effective sample size (ESS) provides a diagnostic for convergence (above around 200 generally implies convergence). The Gelman-Rubin statistic (GR) can be used to assess the convergence of independent chains (below 1.05 indicates convergence).";

const bayesfactor_text = "The Bayes factor is a ratio of two competing models represented by their evidence. It is used to quantify the support for one model over the other.\nBICI allows for the Bayes factor to be calculated, comparing the fitted model with a simpler one in which a specified parameter has a fixed value (typically zero, so effectively removing that parameter from the model)."; 

const trans_plot_text = "These plots show how the rates in different transitions vary as a function of time.\nVarious options can be selected on the right-hand menu (depending on the situation):\n• <b>View</b> – Determines how the results are plotted:\n* <i>Graph (CI)</i> – Gives the rate mean, with shaded regions providing 95% credible intervals.\n* <i>Graph (line)</i> – Plots lines for each sample.\n* <i>Data</i> – Allows for the inferred transition rate to be compared to measured population-level transition data.\n• <b>Sample</b> – Allows for individual samples to be viewed.\n• <b>Classification</b> – Select the classification being looked at.\n• <b>Time-step</b> – Selects the time-step over which rates are estimated.\n• <b>Chain</b> – Select a specific MCMC chain.\nThe “Add filter” option allows for population filters to be added (<i>e.g.</i> to focus on individuals at a given location).";

const trans_exp_text = "These plots show how transition rates in the posterior compare to rates estimated from the model.\nSystematic differences can help to pinpoint misspecification in the model.";

const cum_prob = "<b>Cumulative probability</b> — The calculation of this quantity depends on the type of model:\n• <b>Individual-based</b> – Here each individual transition is sampled from a distribution. The cumulative probability represents the probability of sampling a time later than the realised transition time.\n• <b>Population-based</b> – The realised number of transitions within a timestep is sampled from a Poisson distribution with a given mean. In this case, the cumulative probability is the probability of obtaining this realised number or fewer.";

const trans_bias_text = "These plots show if the transition rate in the posterior is in excess of (or less than) the rate predicted by the model. This is measured using the first moment of the cumulative probability distribution (see below). This information can be used to help understand if the model is a correct one and how it can be improved.\n"+cum_prob;

const trans_pval_text = "The cumulative probability distribution (see below) should be uniform between zero and one, assuming the model is correct. Deviations from uniform can indicate model misspecification. Here the distribution is split into 10 equal divisions, and a p-value is calculated using Pearson's chi-squared test.\nThis plot shows the posterior distribution in -log(p-value), where large values indicate significant deviation from the model (the dashed line represents a notional p-value of 0.05). This information can be used to help understand which aspects of the model are correct and which parts can be improved.\n"+cum_prob;

const trans_dist_text = "These plots show the cumulative probability distribution (see below) for a given transition. If the model is entirely correct, this distribution should be uniform between zero and one. Deviation from uniform indicates misspecification in the model.\nIf the distribution is skewed to the right-hand-side it indicates that transitions have a faster rate (or shorter duration) compared to what would be expected from the model, and <i>vice-versa</i>. The degree of skewness is measured using the first moment of the cumulative probability distribution, and plotted under the 'Trans. (bias)' option.\nAnother measure of deviation is to calculate the p-value assuming the null-hypothesis of a uniform distribution (this is calculated using Pearson's chi-squared test assuming the distribution is split into 10 equally spaced categories, as denoted by the histogram). This is plotted under the 'Trans. (p-val.)' option.  An unexpectedly low p-value indicates model misspecification.\n"+cum_prob;

const ind_plot_text = "These plots show how the compartmental status of different individuals in the system change as a function of time. The colours on the timelines correspond to those used for the compartments in the model.\nVarious options can be selected on the right-hand menu (depending on the situation):\n• <b>View</b> – Determines how the results are plotted:\n* <i>Timeline</i> – Gives timelines for each individual in the system.\n* <i>Table</i> – Provides information about each individual (such as individual covariates for fixed effect or posterior estimates for individual effects).\n• <b>Sample</b> – Allows for individual samples to be viewed.\n• <b>Classification</b> – Select the classification being looked at.\n• <b>Chain</b> – Select a specific MCMC chain.\nClicking on the individual names on the left-hand side allows for individual posterior plots.";

const ind_sing_plot_text = "This shows the time evolution of the posterior probability in different compartments for the selected individual.\nVarious options can be chosen on the right-hand menu (depending on the situation):\n• <b>View</b> – This is divided into a number of different possibilities:\n* <i>Graph</i> – Gives the posterior mean probability, with shaded regions providing 95% credible intervals.\n* <i>Compartment</i> – Plots the compartmental model with shading representing the posterior mean probability in different compartments.\n* <i>Density</i> – Like “Compartment” but expands the shading using Voronoi tessellation.\n• <b>Sample</b> – Allows for individual samples to be viewed.\n• <b>Classification</b> – Select the classification being looked at.\n• <b>Chain</b> – Select a specific MCMC chain.";

//const	derived_plot_text = "This shows the time variation in any derived quantities in the model. Note, derived quantities which are not time-varying can be viewed under the “Parameters” tab.";

const init_pop_text = "The initial population defines the number of individuals in different compartments at the start time. For population-based models, this must be specified (or if omitted it implies the initial population is zero). For individual-based models, an alternative is to leave the initial population unspecified and add known individuals at the start time.\nTwo types of initial population can be selected from:\n• <b>Fixed</b> – The initial population is fixed and remains unchanged.\n• <b>Distribution</b> – The initial population is assumed to be sampled from a distribution.\nThe discussion below looks at the “Fixed” scenario (with “Distribution” relying on defining Dirichlet distributions instead of compartmental populations).\nWhen there is only one classification, each of the compartmental populations is simply specified. However, when there is more than one classification the populations are defined in one of two ways:\n• <b>Focal</b> – Here a “focal” classification is selected and populations in different compartments are defined for this. For other classifications the percentages of individuals in different compartments are set (note, one compartment is left unspecified because it is automatically calculated such that the total adds up to 100%). This method is approximate in the sense that it relies on distributions across all classification being uncorrelated.\n• <b>All</b> – The populations are specified for all possible combinations of compartments across all classifications. This method exactly specifies the initial population.\nThe actual population specification is set by:\n• <b>Graphical interface</b> – The initial population is set using the point and click interface.\n• <b>File</b> – A file specifies the initial populations.";

const sim_init_pop_text = "This option creates a data table for the initial population from the simulated state.\nThis is assumed to be fixed and the populations are specified for all possible combinations of compartments across all classifications (i.e. no 'focal' classification is specified)."; 

const add_pop_text = "This can be used to add individuals to a population-based model after the start time.\nREQUIRES – A data table containing at least the following columns: “t” the time the individuals are added, columns for each classification to denote into which compartment the individuals enter the system and “Population”, which gives the number of individuals added.";

const sim_add_pop_text = "This option creates a data table for the population of individuals added to the system as a function of time from the simulated state.";

const remove_pop_text = "This can be used to remove individuals from a population-based model after the start time.\nREQUIRES – A data table containing at least the following columns: “t” the time the individuals are removed, columns for each classification to denote from which compartment the individuals leave the system and “Population”, which gives the number of individuals removed.";

const sim_remove_pop_text = "This option creates a data table for the population of individuals removed from the system as a function of time from the simulated state.";

const add_ind_text = "This can be used to provide information about individuals added to the system. These individual can either be added at the start or at any later time.\nREQUIRES – A data table containing at least the following columns: “ID” a unique identifier for individuals, “t” the time individuals are added, and columns for each classification to denote into which compartment the individuals enter the system.\nThis compartmental specification can be made in a number of different ways to reflect any potential uncertainty:\n• <b>Precisely</b> – The known compartment the individual is in when entering the system is specified, <i>e.g.</i> “S” would mean that the individual is added in the S state.\n• <b>Multiple choices</b> – Different possibilities are given, separated by the “|” character, <i>e.g.</i> “S|I” would mean an equal probability of being in S or I.\n• <b>Probabilities</b> – The probability of being in any potential compartments are explicitly specified, <i>e.g.</i> “S:0.7|I:0.3” would mean a 70% probability of being in S and a 30% probability of being in I. Such an expression could also contain parameters, <i>e.g.</i> “S:p|I:1-p”, where parameter <e>p</e> would be estimated during inference.\n• <b>Unspecified</b> – This is denoted by “.” and indicates an equal probability for all compartments.";

const sim_add_ind_text = "This option creates a data table for all individuals added to the system from the simulated state.";

const rem_ind_text = "This can be used to provide information about individuals removed from the system.\nREQUIRES – A data table containing at least the following columns: “ID” a unique identifier for individuals and “t” the times individuals are removed.";

const sim_rem_ind_text = "This option creates a data table for all individuals removed from the system from the simulated state.";

const move_ind_text = "This moves individuals to specified compartments in a specified classification at specified times (note, this movement is enforced, and not as a result of an induced change, as would be modelled by a transition).\nREQUIRES – A data table containing at least the following columns: “ID” a unique identifier for individuals, “t” the time individuals are moved and a column giving the destination compartment.";

const sim_move_ind_text = "This option creates a data table for all individuals moved within the system from the simulated state.\nThe following options need to be specified for the data to be generated:\n• <b>Classification</b> – The classification in which the compartmental movement happens.";

const fixed_eff_text = "Fixed effects allow for individual quantities to be incorporated into the model and act as covariates that can modify transition rates, means etc... Fixed effect are indicated in equations by triangular brackets, <i>e.g.</i> <e>⟨g⟩</e> (this quantity has a population-wide average of 1 and variation based on a covariate is through a fixed effect <e>"+fe_char+"^g</e>).\nREQUIRES – A data table containing at least the following columns: “ID” a unique identifier for individuals and “Value” stores the individual covariate.";

const add_param_mult_text = "Adding a parameter multiplier allows for alterations to the model during posterior simulation. These are constructed using linear splines.\nREQUIRES – A data table containing columns for each of the dependencies in the model (if applicable), “t” the knot times and “Value”, which gives the factor which multiplies the parameter.";

const sim_text = "Parameter values need to be specified to simulate from the model.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the last automatically set such that probabilities add to one).\nFor parameters defined as being sampled from distributions, the user can select whether or not to directly set their values or sample as part of the simulation procedure."

const start_sim_text = "This page allows the user to set various options before starting a simulation:\n• <b>Time range</b> – Sets the period over which the simulated results are generated.\n• <b>Time-step</b> – A finite time-step is used to approximate the governing equations. A smaller value provides more accurate results but takes computationally longer. Typically setting this to around 20% of the shortest expected transition period gives fast, accurate results.\n• <b>Simulation number</b> – Sets how many simulations are performed. Because simulations are stochastic, so each will provide a different set of results. Visualising the overall envelope of many simulations can be a useful way to predict probability distributions for future behaviour.";

const time_range_text = "Sets the time period over which the simulated results are generated.";

const inf_time_range_text = "Sets the time period over which inference is performed.";

const acceptance_text = "In this implementation of ABC, first samples are generated and then a cut-off in the error function is selected such that a specified fraction of states with lower error function are used for generating the results.\nSetting this value smaller takes longer but yields better results.";

const abcsmc_acceptance_text = "In this implementation of ABC-SMC, first samples are generated and then a cut-off in the error function is selected such that a specified fraction of samples make up the next generation.\nSetting this value smaller takes computationally longer, but fewer generations are required.";

const kernel_text = "Within ABC-SMC particles are selected from the previous generation with their parameter values perturbed by a kernel. Here the kernel is set to be a multivariate-normal approximation to the posterior (scaled by a selected size). A size of 0.5 works well in most cases.";

const sim_num_text = "This sets how many simulations are performed. Because simulations are stochastic, so each will provide a different set of results. Visualising the overall envelope of many simulations can be a useful way to predict probability distributions for future behaviour.";

const sim_timestep = "A finite time-step is used to approximate the governing equations. A smaller value provides more accurate results but takes computationally longer. Typically setting this to around 20% of the shortest expected transition period gives fast, accurate results.";

const ppc_num_text = "This sets how many posterior simulations are performed. Because simulations are stochastic, so each will provide a different set of results. Visualising the overall envelope of many simulations can be a useful way to predict probability distributions for future behaviour.";

const param_sample_text = "Because MCMC samples are correlated, it makes sense to thin the results (to limit computational processing and memory requirements).\nBICI works by specifying a certain number of output parameter samples to be generated, which are drawn equally along the MCMC chain(s). Consequently, increasing the number of MCMC updates does not change the number of output parameter samples, but it does reduce any potential correlations between those samples.\nBy default, 1000 parameter samples are generated. Selecting a higher value yields smoother posterior distribution plots, but requires more memory and CPU processing."; 

const state_sample_text = "Because MCMC samples are correlated, it makes sense to thin the results (to limit computational processing and memory requirements).\nBICI works by specifying a certain number of output state samples to be generated, which are drawn equally along the MCMC chain(s). Consequently, increasing the number of MCMC updates does not change the number of output state samples, but it does reduce any potential correlations between those samples.\nBy default, 200 state samples are generated (note, this is significantly lower than the default number of parameter samples due to the larger memory requirement needed to represent each state). Selecting a higher value yields less noisy plots for populations, transitions and individuals, but requires more memory and CPU processing."; 

const data_text = "This table shows the data sources used in inference. Different types of data can be added, as selected using the drop-down box in the bottom left-hand corner:\n• <b>Init. Cond.</b> – Provides information about the initial conditions, as well as any individuals that are added, removed or enforced to move compartment.\n• <b>Individual</b> – Individual-level data, such as the times at which individuals undergo a given transition, when they are in a given compartment or disease diagnostic test results. Also genetic sequence data for the pathogen can be added.\n• <b>Population</b> – Population-level data, such as time-series compartmental population measurements, or time-series transition numbers.\n• <b>Additional</b> – This provides addition information, not used for inference. Here true values for individual effects can be loaded (such that prediction accuracies can be calculated) or individual groups can be specified (<i>e.g.</i> sires and progeny in a quantitative genetics model).";

const modification_text = "This allows for addition, removal and enforced movement of individuals on top of that used for the inference model.";

const comp_data_text = "This provides information about the compartment individuals are in at specified time points, <i>e.g.</i> it could be used to denote the fact that individual “Ind. 1” is observed to be in the infected <e>I</e> compartment at time <e>t=3.45</e> and “Ind.2” is in the recovered <e>R</e> compartment at time <e>t=9.21</e>.\nREQUIRES – A data table containing at least the following columns: “ID” a unique identifier for individuals, “t” the time the measurements are made, and the classification on which the state measurement is made.\nThe last column contains a compartmental specification that can be made in a number of different ways to reflect any potential uncertainty:\n• <b>Precisely</b> – The known compartment is exactly specified, <i>e.g.</i> “S” would mean that the individual is in the S state at the measurement time.\n• <b>Multiple choices</b> – Different possibilities are given, separated by the “|” character, <i>e.g.</i> “S|I” would mean an equal probability of being in S or I.\n• <b>Probabilities</b> – The probability of being in any potential compartments are explicitly specified, <i>e.g.</i> “S:0.7|I:0.3” would mean a 70% probability of being in S and a 30% probability of being in I. Such an expression could also contain parameters, <i>e.g.</i> “S:p|I:1-p”, where parameter <e>p</e> would be estimated during inference.\n• <b>Unspecified</b> – This is denoted by “.” and indicates missing data.\nIf an individual is not in the system when a compartmental observation is made, this can be indicated by the ‘!’ character.";

const sim_comp_data_text = "This option creates a data table for the compartmental status of individuals from the simulated state.\nThe following options need to be specified for the data to be generated:\n• <b>Classification</b> – The classification on which compartment status is measured.\n• <b>Fraction observed</b> – The proportion of individuals observed at a given time point (by default set to 1).\n• <b>Times of observations</b> – The times at which individuals are observed. This can either be set to be periodic (with some specified time-step) or using specified time points (comma separated).\n• <b>Observations</b> – The observations can be chosen to be exact (which will generate results like ‘S’ or ‘I’) or noisy. In the latter case, a specified value represents the probability p of observing the correct compartment. The remaining probability 1-p is equally distributed across all other compartments. For example, in an SIR model if p=0.9 and the true compartment is I, the simulated output would be ‘S:0.05|I:0.9|R:0.05’.";

const trans_data_text = "Provides information about the timings of individual transitions, <i>e.g.</i> it could be used to store the precise infection times for a group of individuals.\nREQUIRES – A data table containing at least the following columns: “ID” a unique identifier for individuals and “t” the times individuals undergo the transition. Note, if no ID is associated with the observations, one can be arbitrarily be made up, <i>e.g.</i> if only recovery times are known from an epidemic then the first recovered individual can be called “Ind. 1”, the second “Ind. 2”, and so on and so forth.\nWhen loading transition data the following options are available:\n• <b>Classification</b> – Specifies the classification within which the transition observations are made.\n• <b>Transitions</b> – Checkboxes can be used to select the transition (or transitions) under observation. Alternatively, an observation model can be specified that gives the probability of observing a given transition, <i>e.g.</i> <e>P(S→I)=0.3</e> would mean a probability of 30% of observing an infection transition. Note, parameters can be placed into the observation model (<i>e.g.</i> <e>P(S→I)=p</e> or <e>P(S→I)=η(t)</e> to incorporate time variation) whose parameters can be estimated during inference.\n• <b>Compartmental filter</b> – When there is more than one classification, the compartments in the other classifications can be used to filter which individuals are actually observed. Three possibilities exist:\n* <i>All</i> – All compartments are observed.\n* <i>Comp.</i> – Uses checkboxes to indicate observed compartments.\n* <i>Obs. Model</i> – Allows for specification of an observation model (again, this can involve parameters with potential time variation).\n• <b>Observation time period</b> – Two options exist:\n* <i>All time</i> – Goes over the entire inference period.\n* <i>Specified</i> – Allows for a time window to be set.";

const sim_trans_data_text = "This option creates a data table for individual transition data from the simulated state.\nThe following options need to be specified for the data to be generated:\n• <b>Classification</b> – Specifies the classification within which the transition observations are made.\n• <b>Transitions</b> – Checkboxes can be used to select the transition (or transitions) under observation. Alternatively, an observation model can be specified that gives the probability of observing a given transition, <i>e.g.</i> <e>P(S→I)=0.3</e> would mean a probability of 30% of observing an infection transition. Note, time variation can be placed into the observation model (<i>e.g.</i> <e>P(S→I)=0.4+0.2*cos(0.03*t)</e>).\n• <b>Compartmental filter</b> – When there is more than one classification, the compartments in the other classifications can be used to filter which individuals are actually observed. Three possibilities exist:\n* <i>All</i> – All compartments are observed.\n* <i>Comp.</i> – Uses checkboxes to indicate observed compartments.\n* <i>Obs. Model</i> – Allows for specification of an observation model (again, this can involve parameters with potential time variation).\n• <b>Observation time period</b> – Two options exist:\n* <i>All time</i> – Goes over the entire inference period.\n* <i>Specified</i> – Allows for a time window to be set.";

const diag_test_data_text = "Adds disease diagnostic test data to the analysis. This provides a (potentially noisy) way to assess if individuals are infected or not, <i>e.g.</i> such data could be used to denote the fact that individual “Ind. 1” was tested at time <e>t=34.5</e> and gave a positive result, whereas “Ind. 2” was tested at time <e>t=14.0</e> and was found to be negative.\nREQUIRES – A data table containing at least the following columns: “ID” a unique identifier for individuals, “t” the times the individuals are tested and “Result” which provides the binary result of the tests (see below for what values this can take).\nWhen loading diagnostic test data the following options are available:\n• <b>Classification</b> – Specifies the classification within which the observations are made.\n• <b>Infected compartment(s)</b> – Checkboxes are used to denote which compartments the test aims to give a positive result for.\n• <b>Diagnostics</b> – Values for the test sensitivity and specificity are set (note, these can take parameter values to be estimated under inference).\n• <b>Text value</b> – The text used to represent positive and negative test results in the data file (<i>e.g.</i> 0/1 or +ve/-ve).";

const sim_diag_test_data_text = "This option creates a data table for individual disease diagnostic test data from the simulated state.\nThe following options need to be specified for the data to be generated:\n• <b>Classification</b> – Specifies the classification within which the observations are made.\n• <b>Infected compartment(s)</b> – Checkboxes are used to denote which compartments the test aims to give a positive result for.\n• <b>Diagnostics</b> – Values for the test sensitivity and specificity are set (note, these can take parameter values to be estimated under inference).\n• <b>Text value</b> – The text used to represent positive and negative test results in the data file (<i>e.g.</i> 0/1 or +ve/-ve).\n• <b>Fraction observed</b> – The proportion of individuals observed at a given time point (by default set to 1).\n• <b>Times of observations</b> – The times at which individuals are observed. This can either be set to be periodic (with some specified time-step) or using specified time points (comma separated).";

const seq_data_text = "Incorporates pathogen genetic sequence data into the analysis. Such data can help inform how a pathogen moves between individuals, <i>e.g.</i> if a genetic sequence for the pathogen is observed in individual “Ind. 1” at <e>t=10.5</e> and a closely related (or identical) genetic sequence is observed in “Ind.2” at time <e>t=15.6</e>, it is evidence that the pathogen may have been transmitted from “Ind. 1” to “Ind. 2”.\nPathogen genetic data can be particularly good at estimating rates of transmission between groups (<i>e.g.</i> different species) or geographical spread.\nTwo types of data can loaded:\n• <b>Matrix</b> – A matrix of SNP differences between a set of pathogen genetic measurements.\n• <b>SNP</b> – Raw SNP data for a set of pathogen genetic measurements.\nThe following options must be set:\n• <b>Mutation rate</b> – A parameter giving the rate at which the pathogen genome mutates (in base-pair changes across the whole genome per unit time).\n• <b>Sequence variation</b> – A parameter that allows for variation in sequences for infections entering the system. The number of changes compared to a consensus sequence is drawn from a Poisson distribution with this specified mean.\n• <b>SNP root</b> – Gives the root name for SNP columns in the file (for SNP data).\nREQUIRES – A data table containing at least the following columns: “ID” gives a unique name for each individual, “t” giving the time of the observation. The following columns depend on the type of observation:\n• <b>Matrix</b> – A column “Obs” provides a unique name for each genetic observation. Elements down this column must also be column headings in the table that represent a square matrix giving base-pair differences between the observations.\n• <b>SNP</b> – The data table has a series of columns giving sequence data which have ‘SNP root’ at the beginning of their column name. Elements of these columns are expected to contain two characters denoting the version of the SNP, <i>e.g.</i> ‘AA’, ‘AB’, ‘BA’, or ‘BB’.";

const sim_seq_data_text = "This option creates a data table for pathogen genetic data from the simulated state.\nTwo types of data can be generated:\n• <b>Matrix</b> – A matrix of SNP differences between a set of pathogen genetic measurements.\n• <b>SNP</b> – Raw SNP data for a set of pathogen genetic measurements.\nThe following options need to be specified for the data to be generated:\n• <b>Mutation rate</b> – This sets the rate at which the pathogen genome mutates (in base-pair mutations across the whole genome per unit time).\n• <b>Sequence variation</b> – This allows for variation in sequences for infections entering the system. The number of changes compared to a consensus sequence is drawn from a Poisson distribution with this specified mean.\n• <b>Fraction observed</b> – Gives the proportion of infected individuals observed at a given time point (by default set to 1).\n• <b>Times of observations</b> – The times at which individuals are observed. This can either be set as periodic or at specified time points (comma separated).";

const pop_data_text = "Adds population data to the analysis. Population data informs how many individuals are in specified compartments at different times, <i>e.g.</i> it could be measurements for the number of infected individuals at a number of different time points (so-called time series data).\nREQUIRES – A data table containing at least the following columns: “t” the time at which population measurements are made and “Population”, which gives the estimated number of individuals.\nThe population under study can be filtered for each of the classifications using the following options:\n• <b>All</b> – All individuals within the classification are counted.\n• <b>Comp.</b> – Selected checkboxes are used to choose certain compartments (<i>e.g.</i> only infected individuals in compartment “I”).\n• <b>Obs. Model</b> – An observation model can be specified that gives the fraction of individuals observed in one or more compartments, <i>e.g.</i> <e>P(S)=0.3</e> would mean that only a 30% fraction of individuals are observed in the S compartment (note, fractions can be larger than one corresponding to cases in which the observed data is proportional to the population, <i>e.g.</i> a measure of pathogen level might be expected to be proportional to the number of infected individuals). Parameters can be placed into the observation model (<i>e.g.</i> <e>P(S)=p</e> or <e>P(S)=η(t)</e> to incorporate time variation) that can be estimated during inference.\n• <b>Stratify</b> – The data file contains an additional column (with heading given by the classification name) that specifies the compartment corresponding to that particular observation. Multiple possible compartments are separated by “|” (<i>e.g.</i> “E|I” would include exposed and infected individuals). Furthermore, an observation model can be incorporated (<i>e.g.</i> “S:0.7|I:0.3” or “S:p|I:1-p”).\nThe observation error captures noise in the measurement process itself. This assumes that the observed value is drawn from a distribution with mean given by the underlying value.\nThree possible distributions can be selected from:\n• <b>Poisson</b> – This has a variance equal to the mean.\n• <b>Normal</b> – This allows for more flexibility in setting the observation model. The standard deviation can be defined in one of three different ways:\n* <i>Percentage</i> – The standard deviation is set to a percentage of the mean.\n* <i>SD</i> – The standard deviation is explicitly fixed.\n* <i>SD in file</i> – The data table contains an additional column “SD” that specifies the standard deviation.\n• <b>Negative binomial</b> – This distribution is overdispersed with respect to the Poisson distribution. Specifically, the variance is given by the mean divided by a probability <e>p</e>. This probability can be defined to one of two ways:\n* <i>Value of p</i> – The probability <e>p</e> is explicitly fixed.\n* <i>p in file</i> – The data table contains an additional column “p” which specifies its value.";

const sim_pop_data_text = "This option creates a data table for population data from the simulated state.\nThe population under study can be filtered for each of the classifications using the following options:\n• <b>All</b> – All individuals within the classification are counted.\n• <b>Comp.</b> – Selected checkboxes are used to choose certain compartments (<i>e.g.</i> only infected individuals in compartment “I”).\n• <b>Obs. Model</b> – An observation model can be specified that gives the fraction of individuals observed in one or more compartments, <i>e.g.</i> <e>P(S)=0.3</e> would mean that only a 30% fraction of individuals are observed in the S compartment (note, fractions can be larger than one corresponding to cases in which the observed data is proportional to the population, <i>e.g.</i> a measure of pathogen level might be expected to be proportional to the number of infected individuals). Time variation can be placed into the observation model (<i>e.g.</i> <e>P(S)=0.4+0.2*cos(0.03*t)</e>).\n• <b>Stratify</b> – The data file contains an additional column (with heading given by the classification name) that specifies the compartment corresponding to that particular observation. Multiple possible compartments are separated by “|” (<i>e.g.</i> “E|I” would include exposed and infected individuals). Furthermore, an observation model can be incorporated (<i>e.g.</i> “S:0.7|I:0.3”).\nThe observation error captures noise in the measurement process itself. This assumes that the observed value is drawn from a distribution with mean given by the underlying value.\nThree possible distributions can be selected from:\n• <b>Poisson</b> – This has a variance equal to the mean.\n• <b>Normal</b> – This allows for more flexibility in setting the observation model. The standard deviation can be defined in one of three different ways:\n* <i>Percentage</i> – The standard deviation is set to a percentage of the mean.\n* <i>SD</i> – The standard deviation is explicitly fixed.\n* <i>SD in file</i> – The data table contains an additional column “SD” that specifies the standard deviation.\n• <b>Negative binomial</b> – This distribution is overdispersed with respect to the Poisson distribution. Specifically, the variance is given by the mean divided by a probability <e>p</e>. This probability can be defined to one of two ways:\n* <i>Value of p</i> – The probability <e>p</e> is explicitly fixed.\n* <i>p in file</i> – The data table contains an additional column “p” which specifies its value.\nThe following options need to be specified for the data to be generated:\n• <b>Times of observations</b> – The times at which population measurements are observed. This can either be set to be periodic (with some specified time-step) or using specified time points (comma separated).";

const poptrans_data_text = "Adds aggregated population-level transition data to the analysis. Here the observation period is sliced into divisions (usually of equal size, although this is not a requirement) and the overall number of transitions of a specified type is counted within these divisions, <i>e.g.</i> such data could represent the number of population-wide cases per week during an epidemic. The size of divisions would usually be chosen to be sufficiently large such that a reasonable number of events would be expected to occur (say more than five during the peak of an epidemic outbreak, such that stochastic noise from the Poisson process does not dominate), but sufficiently small to retain temporal resolution.\nNote, if data on individual timings of transitions exist, it is usually best to incorporate these as individual transition data.\nREQUIRES – A data table containing at least the following columns: “Start” and “End” that give the start and end time of the divisions over which transitions are counted (note, the end time of one division would normally be the same as the start time for the next) and “Number” which gives the estimated number of transitions.\nEither one or multiple transitions can be selected within a given classification. Alternatively, an observation model can be specified that denotes the fraction of transitions observed (<i>e.g.</i> <e>P(S→I)=0.5</e> would correspond to only 50% of infection transitions being observed).\nIndividuals can be filtered in the other classifications using the following options:\n• <b>All</b> – All individuals within the classification are counted.\n• <b>Comp.</b> – Checkboxes are used to select certain compartments (<i>e.g.</i> only infected individuals in compartment “I”).\n• <b>Obs. Model</b> – An observation model can be specified that gives the fraction of individuals observed in one or more compartments, <i>e.g.</i> <e>P(M)=0.3</e> would mean that only a 30% fraction of individuals are observed in the M compartment (corresponding to male). Parameters can be placed into the observation model (<i>e.g.</i> <e>P(M)=p</e> or <e>P(M)=η(t)</e> to incorporate time variation) that can be estimated during inference.\n• <b>Stratify</b> – The data file contains an additional column (with heading given by the classification name) that specifies the compartment corresponding to that particular observation. Multiple possible compartments are separated by “|” (<i>e.g.</i> “A|B”). Furthermore, an observation model can be incorporated (<i>e.g.</i> “A:0.7|B:0.3” or “A:p|B:1-p”).\nThe observation error captures noise in the measurement process itself. This assumes that the observed value is drawn from a distribution with mean given by the underlying value.\nThree possible distributions can be selected from:\n• <b>Poisson</b> – This has a variance equal to the mean.\n• <b>Normal</b> – This can be chosen to have a variance less than the Poisson distribution. The standard deviation can be defined in one of three different ways:\n* <i>Percentage</i> – The standard deviation is set to a percentage of the mean.\n* <i>SD</i> – The standard deviation is explicitly fixed.\n* <i>SD in file</i> – The data table contains an additional column “SD” that specifies the standard deviation.\n• <b>Negative binomial</b> – This distribution is overdispersed with respect to the Poisson distribution. Specifically, the variance is given by the mean divided by a probability <e>p</e>. This probability can be defined to one of two ways:\n* <i>Value of p</i> – The probability <e>p</e> is explicitly fixed.\n* <i>p in file</i> – The data table contains an additional column “p” that specifies its value.\nIf, rather than time series data, only the overall number of transitions is known, this can be incorporated by setting the start and end times to encompass the entire time period, <i>e.g.</i> this could be used when only the total number of recoveries is known at the end of an epidemic (as estimated from a serological test).";


const sim_poptrans_data_text = "This option creates a data table for aggregated population-level transition data from the simulated state.\nHere the observation period is sliced into divisions (usually of equal size, although this is not a requirement) and the overall number of transitions of a specified type is counted within these divisions, <i>e.g.</i> such data could represent the number of population-wide cases per week during an epidemic. The size of divisions would usually be chosen to be sufficiently large such that a reasonable number of events would be expected to occur (say more than five during the peak of an epidemic outbreak, such that stochastic noise from the Poisson process does not dominate), but sufficiently small to retain temporal resolution.\nEither one or multiple transitions can be selected within a given classification. Alternatively, an observation model can be specified that denotes the fraction of transitions observed (<i>e.g.</i> <e>P(S→I)=0.5</e> would correspond to only 50% of infection transitions being observed).\nIndividuals can be filtered in the other classifications using the following options:\n• <b>All</b> – All individuals within the classification are counted.\n• <b>Comp.</b> – Checkboxes are used to select certain compartments (<i>e.g.</i> only infected individuals in compartment “I”).\n• <b>Obs. Model</b> – An observation model can be specified that gives the fraction of individuals observed in one or more compartments, <i>e.g.</i> <e>P(M)=0.3</e> would mean that only a 30% fraction of individuals are observed in the M compartment (corresponding to male). Time variation can be placed into the observation model (<i>e.g.</i> <e>P(M)=0.4+0.2*cos(0.03*t)</e>).\n• <b>Stratify</b> – The data file contains an additional column (with heading given by the classification name) that specifies the compartment corresponding to that particular observation. Multiple possible compartments are separated by “|” (<i>e.g.</i> “A|B”). Furthermore, an observation model can be incorporated (<i>e.g.</i> “A:0.7|B:0.3”).\nThe observation error captures noise in the measurement process itself. This assumes that the observed value is drawn from a distribution with mean given by the underlying value.\nThree possible distributions can be selected from:\n• <b>Poisson</b> – This has a variance equal to the mean.\n• <b>Normal</b> – This can be chosen to have a variance less than the Poisson distribution. The standard deviation can be defined in one of three different ways:\n* <i>Percentage</i> – The standard deviation is set to a percentage of the mean.\n* <i>SD</i> – The standard deviation is explicitly fixed.\n* <i>SD in file</i> – The data table contains an additional column “SD” that specifies the standard deviation.\n• <b>Negative binomial</b> – This distribution is overdispersed with respect to the Poisson distribution. Specifically, the variance is given by the mean divided by a probability <e>p</e>. This probability can be defined to one of two ways:\n* <i>Value of p</i> – The probability <e>p</e> is explicitly fixed.\n* <i>p in file</i> – The data table contains an additional column “p” that specifies its value.\nIf, rather than time series data, only the overall number of transitions is known, this can be incorporated by setting the start and end times to encompass the entire time period, <i>e.g.</i> this could be used when only the total number of recoveries is known at the end of an epidemic (as estimated from a serological test).\nThe following options need to be specified for the data to be generated:\n• <b>Times of observations</b> – Sets the times which divides the time line (<i>e.g.</i> into weekly intervals). This can either be set to be periodic (with some specified time-step) or using specified time points (comma separated).";

/*
• <b>Mutation rate</b> – This sets the rate at which the virus genome mutates (in base-pair changes across the whole genome per unit time).\n• <b>Sequence variation</b> – This allows for variation in sequences for infections entering the system. The number of changes compared to a consensus sequence is drawn from a Poisson distribution with specified mean.\n• <b>Base-pairs</b> – The number of base-pairs generated.\n• <b>Fraction observed</b> – Gives the proportion of individuals observed at a given time point.\n• <b>Times of observations</b> – The times at which individuals are observed.\nREQUIRES – A data table containing at least the following columns: “ID” gives a unique name for each individual, “t” giving the time of the observation and a series of columns giving sequence data that have a specified “root” at the beginning of their column name. Elements of these columns are expected to contain two characters denoting the version of the SNP, <i>e.g.</i> “AA”, “AB”, “BA”, or “BB”.";
*/

const ind_eff_data_text = "This loads up true values for individual effects to compare against estimated values from inference. Note, these true values are usually only known from simulation. This data can be created using the “Simulation→Generate Data” tab. This data type has no influence on inference.\nREQUIRES – A data table containing the column “ID” a unique identifier for individuals and “Value”, which gives the true individual effect value.";

const sim_ind_eff_data_text = "This option creates a data table for a specified individual effect from the simulated state.\nThis can be useful to compare against estimated values from inference (and allows for the calculation of prediction accuracy, as well as various visualisations).";

const ind_group_data_text = "This sets up groupings of individuals. Note, this is just used for visualisation (<i>e.g.</i> to view individual effects for parents) and has no bearing on inference.\nA group name must be set (<i>e.g.</i> 'sire' or 'prog.') and individuals within the group can be specified in one of the following ways:\n• <b>Specify</b> – Individuals can be selected using checkboxes.\n• <b>Use wildcard</b> – A wildcard can be used (<i>e.g.</i> 'sire*' selects all individuals starting with 'sire').\n• <b>File</b> – Sets the individuals from a file.\nREQUIRES – A data table containing the column “ID” a unique identifier for individuals.";

const sim_ind_group_data_text = "This sets up groupings of individuals. Note, this is just used for visualisation (<i>e.g.</i> to view individual effects for parents) and has no bearing on inference.\nA group name must be set (<i>e.g.</i> 'sire' or 'prog.') and individuals within the group can be specified in one of the following ways:\n• <b>Specify</b> – Individuals can be selected using checkboxes.\n• <b>Use wildcard</b> – A wildcard can be used (<i>e.g.</i> 'sire*' selects all individuals starting with 'sire').";

const load_tensor_text = "Load up tensor values from a file.\nREQUIRES – A data table containing columns with headings given by the indices of the tensor and a final “Value” column. If the index refers to time down a spline it is given the heading “t” and elements correspond to the knot times of the spline.";

const load_weight_text = "Load up weights from a file. These must have positive values and determine the relative weighting given to different elements in the factor.\nREQUIRES – A data table containing columns with headings given by the indices of the tensor and a final “Value” column. If the index refers to time down a spline it is given the heading “t” and elements correspond to the knot times of the spline.";

const load_reparam_text = "Load up reparameterisation equations from a file.\nREQUIRES – A data table containing columns with headings given by the indices of the tensor and a final “Equation” column.";
 
const load_priorsplit_text = "Load up priors from a file.\nREQUIRES – A data table containing columns with headings given by the indices of the tensor and a final “Prior” column.\nPriors are expressed in the following format, dependent on distribution:\n• <b>uniform(min,max)</b> – A uniform distribution with specified minimum and maximum, <i>e.g.</i> “uniform(4,5)”.\n• <b>exp(mean)</b> – An exponential distribution with specified mean (only appropriate if the parameter is strictly positive).\n• <b>normal(mean,sd)</b> – A normal distribution with a specified mean and standard deviation.\n• <b>gamma(mean,cv)</b> – A gamma distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>log-normal(mean,cv)</b> – A log-normal distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>beta(α,β)</b> – A beta distribution with specified alpha and beta values (for parameters that go between 0 and 1 only). Note, the distribution mean is given by α/(α+β).\n• <b>bernoulli(mean)</b> – A Bernoulli distribution with a specified mean (for binary parameters that can take the values 0 or 1). The mean must be between 0 and 1.\n• <b>fix(value)</b> – Fixes the parameter to a particular value.";

const load_distsplit_text = "Load up distributions from a file.\nREQUIRES – A data table containing columns with headings given by the indices of the tensor and a final “Distribution” column.\nDistributions are expressed in the following format:\n• <b>uniform(min,max)</b> – A uniform distribution with specified minimum and maximum, <i>e.g.</i> “uniform(a,b)”.\n• <b>exp(mean)</b> – An exponential distribution with specified mean (only appropriate if the parameter is strictly positive).\n• <b>normal(mean,sd)</b> – A normal distribution with a specified mean and standard deviation.\n• <b>gamma(mean,cv)</b> – A gamma distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>log-normal(mean,cv)</b> – A log-normal distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>beta(α,β)</b> – A beta distribution with specified alpha and beta values (for parameters that go between 0 and 1 only). Note, the distribution mean is given by α/(α+β).\n• <b>bernoulli(mean)</b> – A Bernoulli distribution with a specified mean (for binary parameters that can take the values 0 or 1). The mean must be between 0 and 1.\n• <b>fix(value)</b> – Fixes the parameter to a particular value.";

const label_text = "Labels are user-defined text that can be positioned anywhere in the compartmental model.";

const box_text = "Bounding boxes are labelled rectangles that bound selected compartments in the model.";

const edit_anno_text = "Annotations can be selected and deleted from the model.";

const anno_text = "Although annotations play no part in how the model actually works, they can be used to clarify the meaning behind different elements of the model.\nTwo types of annotations can be added:\n• <b>Labels</b> — These are user-defined text labels that can be positioned anywhere in the model.\n• <b>Bounding boxes</b> — These are labelled boxes that bound selected compartments.";

const setpop_text = "Sets the initial population in this compartment.";

const setpopper_text = "Sets the percentage of the population in this compartment. Note, all but one of the percentages are specified (with the last automatically calculated such that they add up to 100%).";

const setmultipop_text = "Sets the initial population for this combination of compartments.";

const editsimparam_text = "Edit the parameter value.";

const editconstparam_text = "Edit the parameter value (note, constants are fixed for both simulation and inference).";

const editfactor_text = "Edit the parameter factor (note, one element can be set to '*' and this is then automatically calculated to give a weighted average of 1).";

const editweight_text = "Edit the weights used for the parameter factor. These must have positive values and determine the relative weighting given to different elements.";

const editamatrix_text = "Edit elements in the <b>A</b> matrix. Note, this matrix is expected to be 1 along the diagonal and smaller than one for other elements.";

const editxvector_text = "Edit elements in the covariate <b>X</b> vector.";

const editeqnparam_text = "Edit the equation that provides the reparameterisation.";

const distribution_text = "Setting elements of a parameter vector / matrix / tensor to be sampled from a distribution is similar to specifying a prior (and uses the same set of possibilities). Here, however, new parameters are introduced that characterise the distribution (<i>e.g.</i> a mean, a standard deviation etc...). These go on to have their own prior, so incorporating a so-called “hierarchical” model.";

const editprior_text = "Edit the prior distribution. This can be selected from eight different possibilities:\n• <b>uniform</b> – A flat prior distribution between a minimum and maximum value.\n• <b>exp</b> – An exponential distribution with a specified mean (only appropriate if the parameter is strictly positive).\n• <b>normal</b> – A normal distribution with a specified mean and standard deviation.\n• <b>gamma</b> – A gamma distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>log-normal</b> – A log-normal distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>beta</b> – A beta distribution with specified alpha and beta values (for parameters that go between 0 and 1 only). Note, the distribution mean is given by alpha/(alpha+beta).\n• <b>bernoulli</b> – A Bernoulli distribution with a specified mean (for binary parameters that can take the values 0 or 1).\n• <b>fix</b> – Fixes the parameter to a particular value.";

const editpopprior_text = "Edit the population distribution. This must be a strictly positive and can be selected from four different possibilities:\n• <b>uniform</b> – A flat distribution between a minimum and maximum value.\n• <b>exp</b> – An exponential distribution with a specified mean.\n• <b>gamma</b> – A gamma distribution with a specified mean and coefficient of variation.\n• <b>log-normal</b> – A log-normal distribution with a specified mean and coefficient of variation.";

const editprior_text2 = "This page is used to edit the prior distributions assigned to model parameters. In inference priors are used to encapsulate any previous estimates for parameter values.\nOne common approach is to identify a range of plausible values a given parameter is likely to take (based on expert judgment) and use this to inform a uniform distribution.\nFor most parameters prior distributions can be selected from eight different possibilities:\n• <b>uniform</b> – A flat prior distribution between a minimum and maximum value.\n• <b>exp</b> – An exponential distribution with a specified mean (only appropriate if the parameter is strictly positive).\n• <b>normal</b> – A normal distribution with a specified mean and standard deviation.\n• <b>gamma</b> – A gamma distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>log-normal</b> – A log-normal distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>beta</b> – A beta distribution with specified alpha and beta values (for parameters that go between 0 and 1 only). Note, the distribution mean is given by alpha/(alpha+beta).\n• <b>bernoulli</b> – A Bernoulli distribution with a specified mean (for binary parameters that can take the values 0 or 1).\n• <b>fix(value)</b> – Fixes the parameter to a particular value.\nWhilst it may be tempting for the user to provide very uninformative priors (<i>e.g.</i> uniform across a wide range), this can result in very long execution times. Methods like MCMC rely on generating an initial state by sampling from the prior and simulating from the system. If this state is very different from the posterior it can take a long time for the algorithm to get from one to the other (a time period known as burn-in). Worst still, it may be that entirely unphysical solutions exist within parameter space into which the system can become stuck. Consequently, a careful examination of the prior is recommended in cases in which the burn-in phase is taking a long time.";

const search_text = "Search for a particular string in a column. If multiple results are returned, these can be iterated through.\nA wildcard “*” can be used to represent text which is ignored (<i>e.g.</i> “S*” would find all entries beginning with “S”, or “*ind*” would return all entries containing “ind”).";

const boundary_text = "On a map a “boundary” can be used to denote a geographical area. It is made up of one or more polygons with vertices expressed in terms of longitude and latitude coordinates.";
 
const editele_text = "Edit the table element. Note, some table entries are restricted depending on what quantity is being edited (<i>e.g.</i> time must always be a numeric value).";

const replace_text = "Replace one text string with another along a column.\nWildcards “*” can be used in this replacement. For example searching for “S*” and replacing it with “R*” would replace all entries beginning with “S” to corresponding entries beginning with “R”. Note, the same number of wildcards must be used in both the search and replace text boxes.";

const order_text = "Order rows based on elements along a column. This ordering can either be performed numerically or alphabetically.";

const deleterows_text = "Delete rows for which a given column value corresponds to a specified string.\nA wildcard “*” can be used to represent text which is ignored (<i>e.g.</i> “S*” would delete all entries beginning with “S”, or “*ind*” would delete all entries containing “ind”).";

const editcol_text = "BICI provides simple data editing/searching tools:\n• <b>Search</b> – Find rows containing a specified string.\n• <b>Replace</b> – Replace column elements corresponding to one string with another.\n• <b>Delete</b> – Delete rows for which the element contains a specified string.\nNote, wildcards “*” can be used in these operations.";

const loadcomp_text = "Compartments can be directly imported into the model from a file.\nREQUIRES – A data table containing a column with heading “Name” giving the name of the compartments to be added.\nFurthermore, the compartment positions can be specified via columns with headings “x” and “y” (in Cartesian coordinates), or “Lat” and “Long” (in geographic coordinates). Note, in Cartesian coordinates positions are automatically allocated if the “Load position data” checkbox is unchecked.\nThe colour of the compartments can be selected or specified individually for each compartment though an additional column in the data file with heading “Color” (either in hexadecimal format, <i>e.g.</i> “#ff0000”, or RGB format, <i>e.g.</i> “rgb(255,0,0)”).";

const loadtrans_text = "Transitions can be directly imported into the model from a file.\nREQUIRES – A data table containing at least the following columns: “From” gives the compartment from which the transition originates (“+” is used to represent a source), “To” gives the compartment to which the transition ends up (“-” is used to represent a sink) and “Value” specifies the transition.\nThe format for this value depends on the transition distribution:\n• <b>exp(rate:[eq])</b> – An exponential distribution, where “[eq]” is replaced with an equation that determines the rate at which transitions occurs, <i>e.g.</i> “<e>r</e>” or “<e>β×{I}</e>”.\n• <b>gamma(mean:[eq1],cv:[eq2])</b> – A gamma distribution with equations for mean and coefficient of variation.\n• <b>erlang(mean:[eq],shape:[integer])</b> – An Erlang distribution with equation for mean and fixed positive integer shape.\n• <b>log-normal(mean:[eq1],cv:[eq2])</b> – A log-normal distribution with equations for mean and coefficient of variation.\n• <b>weibull(scale:[eq1],shape:[eq2])</b> – A Weibull distribution with equations for scale and shape.\n• <b>period(time:[eq])</b> – For when the event happens after a certain prescribed period.";

const file_text = "The following file options are available:\n• <b>Load</b> – This can be used to load a model/analysis in “.bici” format.\n• <b>Save</b> – Saves the model and data in “.bici” format using the current path (note, this doesn't save results, so the file size is relatively small).\n• <b>Save As...</b> – Saves the model and data in “.bici” format using a specified path.\n• <b>Save Simulation</b> – Saves simulation results, along with the model/data used to generate them.\n• <b>Save Inference</b> – Saves inference results, along with the model/data used to generate them (note, these files can be large because they store many samples of the model state).\n• <b>Save Post. Sim.</b> – Saves posterior and posterior simulation results, along with the model/data used to generate them.\n• <b>View Code</b> – Used to view the code for the currently loaded model.";

const import_text = "The following import options are available:\n• <b>Compartments</b> – Loads multiple compartments from a file.\n• <b>Comp. Map</b> – Loads multiple compartments represented by geographical boundary data from a GeoJSON file.\n• <b>Transitions</b> – Loads multiple transitions from a file.";

const export_text = "The following export options are available:\n• <b>Script</b> – This is like “Save”, but in addition to a “.bici” script file a data folder is created that contains all the data (this makes the BICI script more readable).\n• <b>Print</b> – Prints the graph/plot/table currently being viewed.\n• <b>Image</b> – Creates an image file for the graph/plot/table currently being viewed (in .png format).\n• <b>Video</b> – Creates an video file for the animation currently being viewed (in .mp4 format).\n• <b>Table</b> – Creates a file for a table currently being viewed (in .csv format).\n• <b>Params</b> – Exports posterior parameter samples.\n• <b>States</b> – Exports posterior samples for the system state.";

const desc_text = "BICI allows users to provide a brief description of the model and any analysis performed. This is not only useful to keep track for personal use, but also makes it easier and more transparent for others to understand what has been done.\nThe description can be edited by clicking on the “Edit” button. A markdown format is used, <i>i.e.</i> this allows for the following concise formating: “# Title”, “## Subtitle”, “- Bullet point”, “*italic text*” and “**bold text**”. Parameters can be added by enclosing in dollar symbols, <i>e.g.</i> “$a$” or “$b^super_sub$”.";

const eqn_text = "This editor allows the user to create equations used in the model (<i>e.g.</i> representing the rate at which an individual passes down a transition).\nEquations are potentially made up of the following elements:\n• <b>Numbers</b> – Fixed numerical quantities.\n• <b>Parameters</b> – These are usually represented by Greek letters (<i>e.g.</i> <e>β</e>) that can be typed in latex format (<i>e.g.</i> “\\alpha” automatically gets converted to “<e>α</e>”). Parameters can depend upon classification indices, <i>e.g.</i> <e>β_a</e> where the index “<i>a</i>” represents locations within the model (primed indices can also be used, see below). Parameters need to be set under model simulation and can be inferred from data.\n• <b>Populations</b> – These are denoted by curly brackets and represent the number of individuals within a sub-population (<i>e.g.</i> <e>{I}</e> may represent the total number of infected individuals or <e>{S,M}</e> may represent the number of susceptible males). Indexes can also be used in populations, <i>e.g.</i> <e>{I,a}</e> could represent the local infected population in location “<i>a</i>” .\n• <b>Time</b> – The quantity “t” is reserved to represent time. This can either be explicitly used within an equation, or to indicate a time-varying parameter (<i>e.g.</i> <e>η(t)</e>) represented by a spline.\n• <b>Operators</b> – Standard operators are used to combine together quantities: “*” for times, “/” for divide, “+” for addition and “-” for subtraction.\n• <b>Sums</b> – These can be used to add up over the compartments within a classification. For this purpose a “primed” index is used. For example the text input “\\sum_a' (M_a,a'*{I,a'})” is interpreted as the mathematical expression “<e>Σ_a'</e> (<e>M_a,a'</e>×<e>{I,a'}</e>)”. Here the matrix <e>M_a,a'</e> mediates interactions between different areas and the primed location index “<i>a</i>'” is summed over. To facilitate computation on spatial models, it is possible to restrict the range of sums. For example, “\\sum^max:50_a' (M_a,a'*{I,a'})” only sums over terms where location “<i>a</i>'” is less than 50km from location “<i>a</i>”. This example assumes geographical coordinates. In Cartesian coordinates “max” restricts the Euclidean distance between compartments.\n• <b>Time integral</b> – These can be used to integrate an expression over time (for derived quantities only). They have the format “\\int dt (…)”, where the content goes in the round brackets. For example the expression “\\int dt ({I})” is mathematically represented by <e>∫dt {I}</e>. By default, time is integrated over the entire system period, but limits can be placed (<i>e.g.</i> “\\int[10,50] dt ({I})” becomes <e>∫^50_10</e><e>dt {I}</e>. Time integration can be used to estimate the relative contribution to different routes of transmission. For example, if the force of infection is given by <e>β{I}+ϕ</e>, the derived quantity “\\int dt (\\phi) / \\int dt (\\beta{I}+\\phi)” gives the relative contribution of external infections.\n• <b>Fixed effects</b> – These are denoted by triangular brackets (<i>e.g.</i> <e>⟨w⟩</e>) and allow for an individual property (<i>e.g.</i> weight) to be related to model transitions (<i>e.g.</i> it could be that lighter individuals become infected more quickly). Fixed effects have a population mean of one and are strictly positive. A parameter (<e>"+fe_char+"^w</e> in this case) controls the strength of the fixed effect, which is either set or inferred.\n• <b>Individual effects</b> – These are denoted by square brackets (<i>e.g.</i> <e>[g]</e>) and allow for another type of individual-based variation. Individual effects are log-normally distributed with a mean of one and a variance matrix that can be set or estimated. Additionally, they can be correlated between individuals (through some loadable <b>A</b> matrix), which allows for quantitative genetics models to be incorporated.\n• <b>Functions</b> – A selection of different functions can be added into equations:\n* <i>exp(x)</i> – The exponential function.\n* <i>log(x)</i> – The logarithm function.\n* <i>sin(x)</i> – The sine function.\n* <i>cos(x)</i> – The cosine function.\n* <i>step(x)</i> – The step function (if <e>x>0</e> returns 1, else 0).\n* <i>pow(x|y)</i> – The power function <e>x^y</e>.\n* <i>max(x|y)</i> – The maximum function (if <e>x>y</e> returns <e>x</e>, else returns <e>y</e>).\n* <i>min(x|y)</i> – The minimum function (if <e>x<y</e> returns <e>x</e>, else returns <e>y</e>).\n* <i>abs(x)</i> – The absolute function (if <e>x>0</e> returns <e>x</e>, else returns <e>-x</e>).\n* <i>sqrt(x)</i> – The square root function.\n* <i>thresh(x|y)</i> – The threshold function (if <e>x<y</e> returns 0, else returns <e>x</e>).\n* <i>ubound(x,y)</i> – An upper bounded function (if <e>x>y</e> returns ∞, else returns <e>x</e>).";

const example_text = "This section introduces some simple examples that demonstrate the versatility of BICI applied to a variety of different models and data scenarios.\nThese examples can be altered or experimented on in any way. Reloading from this homepage will return them to their default settings.";

const run_local_text = "BICI can either be run on your local machine (for small jobs) or on a Linux cluster (for big jobs). If run on a Linux cluster two options are available for saving the script file:\n• <b>Save single script file</b> – This generates a single script file which is then saved on the Linux cluster and run.\n• <b>Save script file + data directory</b> – This generates a script file and associated data directory. This option is useful if the script needs to be edited on the Linux cluster (because the size of the script file is much smaller).";

const sample_text = "MCMC works by generating a series of posterior samples for the model parameters and state. An “update” constitutes a whole series of “proposals” that make changes to different aspects of the model (<i>i.e.</i> different parameters and/or parts of the state) in a range of ways.\nThe important point is that after the “update” a new posterior sample is generated. Because these samples tend to be highly correlated, it becomes necessary to thin the results. By default, parameter samples are thinned to leave 1000 and state samples are thinned to leave 200 (these settings can be changed under “Further options”).";

const pas_sample_text = "After the initialisation phase, each of the particles in PAS-MCMC becomes an MCMC chain from which posterior samples are generated.\nUnder MCMC the algorithm iteratively implements 'updates', which make changes to the model parameters and state. After each update a new posterior sample is generated. Because these samples are correlated, it is necessary to generate many more samples than are needed and then thin the results. By default, parameter samples are thinned to leave 1000 and state samples are thinned to leave 200 (these settings can be changed under “Further options”).";

const particle_text = "A “particle” denotes a combination of a parameter set and a system state. MCMC proposals act on particles to change their state.\nIn “particle annealed sampling”, particles initially map out the prior. Over successive generations (where particles are duplicated or culled) the algorithm passes from the prior to the posterior. Once this is complete, a sampling phase generates posterior samples in the same way as DA-MCMC.\nAs with MCMC chains, running PAS-MCMC with more particles is faster but requires more CPU cores and uses more memory.";

const gen_update_text = "This sets the number of MCMC updates used for each generation of the algorithm as a percentage of the number of MCMC updates.\nIf this is chosen to be too large, the effective burn-in time will become long. If this is chosen to be too small, it becomes more likely that the algorithm becomes stuck in a metastable state.\nA default value of 1% is used, which means that if 30 generations are performed, burn-in would consume around 30% of the CPU time compared to the MCMC phase (<i>i.e.</i> when posterior samples are generated).";

const abc_sample_text = "This gives the number of independent samples from the posterior approximation (based on the observation probability being above a threshold).";

const abc_gen_text = "ABC-SMC works over a series of generations with each generation giving a better posterior approximation. Typically, 5-10 generations are used with each taking computationally longer than the last.";

const further_inf_text = "This page allows the user to set various other options before starting inference.";

const further_sim_text = "This page allows the user to set various other options before starting simulation.";

const further_post_sim_text = "This page allows the user to set various other options before starting posterior simulation.";

const indmax_text = "In cases in which one or more species uses an individual-based model, this sets the maximum number of individuals allowed.\nSuch a threshold is introduced to stop BICI running out of memory when the individual number diverges."; 

const paramoutputmax_text = "If the number of elements in a tensor exceeds this value, results are not output. This is introduced to stop very large output files when the tensor is not of direct interest."; 

const burnin_text = "<b>Burn-in</b> – The burn-in phase in MCMC is the initial period that moves from a starting random guess for parameter values (typically sampled from the prior) to a sample representative of the posterior.\nThe burn-in period is usually specified as a percentage of the overall number of MCMC updates (by default, 20% is used).\n<b>Annealing</b> – This approach can help to stop MCMC becoming stuck in metastable states during the burn-in phase. This introduces an “inverse temperature” parameter $φ$ that determines to what extent the data is incorporated into the analysis. When $φ=0$, MCMC maps out the prior and when $φ=1$, the normal posterior is generated.\nAnnealing works by gradually varying $φ$ from $0$ to $1$ (at which point the posterior is then sampled). Precisely how this is done can be selected from the following options:\n• <b>none</b> – No annealing is performed and $φ=1$ during burn-in.\n• <b>scan</b> – $φ$ is optimally scanned using a specified ‘rate’. Note, here the burn-in period depends on this rate (with smaller values yielding more gradual annealing but taking computationally longer), rather than a percentage.\n• <b>log-auto</b> – An automatic logarithm model is applied to $φ$.\n• <b>power-auto</b> – An automatic power-law model is applied to $φ$.\n• <b>power</b> – A power law model is applied $φ$ (here the ‘power’ property must be set).";

const start_inf_text = "This page allows the user to set various options before starting inference:\n• <b>Time range</b> – Sets the period over which the inference is performed.\n• <b>Time-step</b> – For approximate methods it is often necessary to specify a time-step. This should be chosen to be sufficiently long to allow the algorithm to be fast, but sufficiently short for it to be accurate. A typical compromise would be to set it to around 20% the expected shortest transition distribution mean.\n• <b>Algorithm</b> – Different algorithms can be used to perform inference.\n* <i>DA-MCMC</i> – Data augmentation MCMC provides the most accurate inference (although it can be slow for many individuals).\n* <i>PAS-MCMC</i> – Particle annealed sampling (PAS) generates a power posterior approximation that get successively closer to the true posterior over a series of generations.\n* <i>ABC</i> – Approximate Bayesian Computation. Estimates the posterior by simulating from the model and comparing the output with the data (population-based data only). Only those samples which are sufficiently close (as measured by an error function) are used for the posterior approximation.\n* <i>ABC-SMC</i> – Approximate Bayesian Computation using Sequential Monte Carlo. A version of ABC that improves posterior estimates over a series of generations (population-based data only).\n* <i>PMCMC</i> – Particle MCMC targets the true posterior and makes use of multiple “particles” (stochastic simulations from the model) run in parallel.\n* <i>Emulation</i> – Here an emulator is used to approximate the posterior surface. This can be much faster than other approaches, provided the number of model parameters is not too large.";
//* <i>ABC-MBP</i> – Approximate Bayesian computation using model-based proposals is an approximate method which utilises an “error function” and constructs the posterior distribution based on successively reducing a threshold maximum error function over a series of generations.

const inf_algorithm = "Different algorithms can be used to perform inference.\n• <i>DA-MCMC</i> – Data augmentation MCMC provides the most accurate inference (although it can be slow for many individuals).\n• <i>PAS-MCMC</i> – Particle annealed sampling (PAS) generates a power posterior approximation that get successively closer to the true posterior over a series of generations.\n• <i>ABC</i> – Approximate Bayesian Computation. Estimates the posterior by simulating from the model and comparing the output with the data (population-based data only). Only those samples which are sufficiently close (as measured by an error function) are used for the posterior approximation.\n• <i>ABC-SMC</i> – Approximate Bayesian Computation using Sequential Monte Carlo. A version of ABC that improves posterior estimates over a series of generations (population-based data only).\n• <i>PMCMC</i> – Particle MCMC targets the true posterior and makes use of multiple “particles” (stochastic simulations from the model) run in parallel.\n• <i>Emulation</i> – Here an emulator is used to approximate the posterior surface. This can be much faster than other approaches, provided the number of model parameters is not too large.";
//• <i>ABC-MBP</i> – Approximate Bayesian computation using model-based proposals is an approximate method which utilises an “error function” and constructs the posterior distribution based on successively reducing a threshold maximum error function over a series of generations.\n

const fix_text = "This message indicates that some elements of the model are inconsistent and so need to be addressed before parameters can be specified.\nClicking on the “View” buttons allows the user to jump to the parts of the model that are problematic.";

const edittensor_text = "Values for the tensor can be edited by clicking on the table elements.\nAlternatively, the entire table can be loaded from a file (by clicking “Load” at the bottom of the page).";

const edittensorweight_text = "These determine the relative weighting given to different elements in the tensor. Values can be edited by clicking on the table elements.\nAlternatively, the entire table can be loaded from a file (by clicking “Load” at the bottom of the page).";

const dist_mat_text = "This shows the distance between different compartments in the model.\nIn Cartesian coordinates this is given by the Euclidean distance and in geographical coordinates (latitude and longitude) it is measured in kilometers.";

const iden_mat_text = "This shows the identity matrix between different compartments in the model.\nThe value for δ_c,c′ is one when c=c′, otherwise zero.\nThe identity matrix is often used such that a given rate only applies to individuals in a given state. For example, 'β×δ_s,M×{I}' would only apply when an individual's sex (indexed by s) is male (M).";

const editreparam_text = "Tensors can be reparameterised, usually as a way to reduce the overall number of parameters to be estimated.\nThis is achieved by setting the elements of the tensor to user-defined equations.\nAlternatively, the entire table can be loaded from a file by clicking “Load” at the bottom of the page.";

const init_pop_text2 = "This page allows the user to set the initial populations in different model compartments.";

const param_mult_text = "When doing posterior simulation, adding a multiplier to a parameter can be used to investigate the effect of changing its value under future prediction or counterfactual analysis.";

const initpopdist_text = "This page allows the user to set the initial population prior in different model compartments.";

const editpriorsplit_text = "This page allows the user to specify individual priors for each of the elements in the parameter tensor. This can either be done by hand or via loading prior expressions from a file by clicking on the “Load” button at the bottom of the page.";

const editdistsplit_text = "This page allows the user to specify individual distributions for each of the elements in the parameter tensor. This can either be done by hand or via loading distribution expressions from a file by clicking on the “Load” button at the bottom of the page.";

const load_initpop_text = "Load up the initial population from a data table.\nREQUIRES – A data table containing columns with headings given by the classification names along with “Population”, which gives the initial number of individuals within each compartmental combination.";

const load_initpopdist_text = "Load up the initial population Dirichlet distribution.\nREQUIRES – A data table containing columns with headings given by the classification names along with “Alpha”, which gives the Dirichlet α value for each compartmental combination (the value of α divided by the sum of all αs gives the probability of an individual being in that compartmental state).";

const load_comp_text = "Compartments can be directly loaded into the model from a file.\nREQUIRES – A data table containing the column “Name” giving the compartment names.";

const load_compcol_text = "Compartments with associated colours can be directly loaded into the model from a file.\nREQUIRES – A data table containing the column “Name”, which gives the compartment names to be added, and “Color”, which gives the compartment colours (either in hexadecimal format, <i>e.g.</i> “#ff0000”, or RGB format, <i>e.g.</i> “rgb(255,0,0)”).";

const load_comppos_text = "Compartments with associated positions can be directly loaded into the model from a file.\nREQUIRES – A data table containing the column “Name”, which gives the compartment names to be added, then columns “x” and “y” giving the x and y positions (in Cartesian coordinates) or “Lat” latitude and “Long” longitude (in geographic coordinates).";

const load_compposcol_text = "Compartments with associated positions and colours can be directly loaded into the model from a file.\nREQUIRES – A data table containing the column “Name”, which gives the compartment names to be added, then columns “x” and “y” giving the x and y positions (in Cartesian coordinates) or “Lat” latitude and “Long” longitude (in geographic coordinates), then a column “Color” giving colours (either in hexadecimal format, <i>e.g.</i> “#ff0000”, or RGB format, <i>e.g.</i> “rgb(255,0,0)).";

const load_compmap_text = "Geographical boundaries used to represent compartments can be loaded via GeoJSON format. The boundary data column is automatically selected, but a column giving the compartmental names must be selected.";

const load_compartment_text = "Load up the compartmental status of individuals at different time points from a file.\nREQUIRES – A data table containing at least the following columns: “ID” a unique identifier for individuals, “t” the measurement times, and the name of the classification being measured.\nThe last column contains a compartmental specification that can be made in a number of different ways to reflect any potential uncertainty:\n• <b>Precisely</b> – The known compartment is exactly specified, <i>e.g.</i> “S” would mean that the individual is in the S state at the measurement time.\n• <b>Multiple choices</b> – Different possibilities are given, separated by the “|” character, <i>e.g.</i> “S|I” would mean an equal probability of being in S or I.\n• <b>Probabilities</b> – The probabilities of being in any potential compartments are explicitly specified, <i>e.g.</i> “S:0.7|I:0.3” would mean a 70% probability of being in S and a 30% probability of being in I. Such an expression could also contain parameters, <i>e.g.</i> “S:p|I:1-p”, where parameter <e>p</e> would be estimated during inference.\n• <b>Unspecified</b> – This is denoted by “.” and indicates missing data.";

const load_transition_text = "Load up the transition times of individuals from a file.\nREQUIRES – A data table containing “ID” a unique identifier for individuals and “t” the time of the observed transitions.";

const load_population_text = "Load up population data from a file.\nREQUIRES – A data table containing “t” the measurement times and “Population” giving the measured population values. Additionally, a column “SD” can be used to load the observation uncertainties (for a normally distributed error model) or probability “p” (for a negative binomial distribution error model).";

const load_poptrans_text = "Load up population-level transition data from a file.\nREQUIRES – A data table containing “Start” and “End”, which provide the start and end time over which transitions are measured, and “Number” giving the measured number of transitions. Additionally, a column “SD” can be used to load the observation uncertainties (for a normally distributed error model) or probability “p” (for a negative binomial distribution error model).";

const load_add_pop_text = "This can be used to provide information about individuals added to a population-based model.\nREQUIRES – A data table containing “t” the time individuals are added, columns for each of the classifications to denote into which compartment the individuals enter the system, and “Population” giving the number entering.";

const load_remove_pop_text = "This can be used to provide information about individuals removed from a population-based model.\nREQUIRES – A data table containing “t” the time individuals are removed, columns for each of the classifications to denote from which compartment the individuals leave the system, and “Population” giving the number leaving.";

const load_tensor_text2 = "Load up tensor values from a file.\nREQUIRES – A data table containing columns with headings given by the indices of the tensor and a final “Equation” column.";

const load_reparam_text2 = "Load up reparameterisation equations from a file.\nREQUIRES – A data table containing columns with headings given by the indices of the tensor and a final “Equation” column.";

const load_priorsplit_text2 = "Load up priors from a file.\nREQUIRES – A data table containing columns with headings given by the indices of the tensor and a final “Prior” column.\nPriors are expressed in the following format, dependent on distribution:\n• <b>inverse(min,max)</b> – An inverse distribution with specified minimum and maximum, <i>e.g.</i> “inverse(0.01,1)”. Inverse distributions are commonly used Jeffreys priors for rates and means.\n• <b>uniform(min,max)</b> – A uniform distribution with specified minimum and maximum.\n• <b>power(min,max)</b> – A polynomial power distribution with specified minimum, maximum and power.\n• <b>exp(mean)</b> – An exponential distribution with specified mean (only appropriate if the parameter is strictly positive).\n• <b>normal(mean,sd)</b> – A normal distribution with a specified mean and standard deviation.\n• <b>gamma(mean,cv)</b> – A gamma distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>log-normal(mean,cv)</b> – A log-normal distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>beta(α,β)</b> – A beta distribution with specified alpha and beta values (for parameters that go between 0 and 1 only). Note, the distribution mean is given by α/(α+β).\n• <b>bernoulli(mean)</b> – A Bernoulli distribution with a specified mean (for binary parameters that can take the values 0 or 1). The mean must be between 0 and 1.\n• <b>fix(value)</b> – Fixes the parameter to a particular value.";

const load_distsplit_text2 = "Load up distributions from a file.\nThis requires a data table containing columns with headings given by the indices of the tensor and a final “Distribution” column. Distributions are expressed in the following format:\n• <b>inverse(min,max)</b> – An inverse distribution with specified minimum and maximum, <i>e.g.</i> “inverse(0.01,1)”.\n• <b>uniform(min,max)</b> – A uniform distribution with specified minimum and maximum.\n• <b>power(min,max)</b> – A polynomial power distribution with specified minimum, maximum and power.\n• <b>exp(mean)</b> – An exponential distribution with specified mean (only appropriate if the parameter is strictly positive).\n• <b>normal(mean,sd)</b> – A normal distribution with specified mean and standard deviation.\n• <b>gamma(mean,cv)</b> – A gamma distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>log-normal(mean,cv)</b> – A log-normal distribution with a specified mean and coefficient of variation (for positive parameters only).\n• <b>beta(α,β)</b> – A beta distribution with specified alpha and beta values (for parameters that go between 0 and 1 only). Note, the distribution mean is given by α/(α+β).\n• <b>bernoulli(mean)</b> – A Bernoulli distribution with a specified mean (for binary parameters that can take the values 0 or 1). The mean must be between 0 and 1.\n• <b>fix(value)</b> – Fixes the parameter to a particular value.";

const setderived_text = "A derived quantity is functionally related to other model parameters through an equation. Such a quantity usually has some physical meaning (<i>e.g.</i> the reproduction number <e>R_0</e> in an epidemic model is related to transmission and recovery rates).\nPlace the new parameter in the left-hand text box and the equation relating it to other parameters and/or populations in the right-hand text box.";

const uniparam_text = "This shows all the univariate parameters in the model.\nClicking shows where these parameters appear in the model.";

const paramvector_text = "This shows all the parameter vectors in the model.\nClicking shows where these vectors appear in the model.";

const parammatrix_text = "This shows all the parameter matrices in the model.\nClicking shows where these matrices appear in the model.";

const paramtensor_text = "This shows all the parameter tensors in the model.\nClicking shows where these tensors appear in the model.";

const sim_uni_text = "This shows all the univariate parameters in the model that need to be specified with numeric values. These values must be set before simulation can be performed.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the remaining automatically set such that probabilities add to one). The parameter that is automatically calculated can be altered by clicking on the “Auto” button.";

const sim_vector_text = "This shows all the parameter vectors in the model that need to be specified with numeric values.\nThis can be done by clicking on the parameter name and either manually setting each value or loading a file with a vector of constant values.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the remaining automatically set such that probabilities add to one). The parameter that is automatically calculated can be altered by clicking on the “Auto” button.\nFor parameters defined as being sampled from distributions (in the “Model→Parameters” tab), the user can toggle the “Sample” checkbox to determine whether or not to directly set their values or sample as part of the simulation procedure.";

const sim_matrix_text = "This shows all the parameter matrices in the model that need to be specified with numeric values.\nThis can be done by clicking on the parameter name and either manually setting each value or loading a file with a matrix of constant values.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the remaining automatically set such that probabilities add to one). The parameter that is automatically calculated can be altered by clicking on the “Auto” button.\nFor parameters defined as being sampled from distributions (in the “Model→Parameters” tab), the user can toggle the “Sample” checkbox to determine whether or not to directly set their values or sample as part of the simulation procedure.";

const sim_tensor_text = "This shows all the parameter tensors in the model that need to be specified with numeric values.\nThis can be done by clicking on the parameter name and either manually setting each value or loading a file with tensor element constant values.\nIn the case of branching probabilities, all but one leaving a compartment must be specified (with the remaining automatically set such that probabilities add to one). The parameter that is automatically calculated can be altered by clicking on the “Auto” button.\nFor parameters defined as being sampled from distributions (in the “Model→Parameters” tab), the user can toggle the “Sample” checkbox to determine whether or not to directly set their values or sample as part of the simulation procedure.";

const sim_ie_variance_text = "Individual effects allow for individual-based variation in quantities within the model (<i>e.g.</i> to capture variation in susceptibility). They are incorporated into transitions by enclosing a single letter with square brackets (<i>e.g.</i> [g]).\nIndividual effects are assumed to be log-normally distributed with a mean defined to be exactly one. This shows all the parameters associated with individual effects. Here “Ω” is used to represent the variance of the effect on the log scale and “ω” the correlation (when two are more individual effects are combined). The superscript denotes the individual effect(s) the parameter is associated with.";

const inf_ie_variance_text = "This shows all the parameters associated with individual effects. Here “Ω” is used to represent the variance of the effect on the log scale and “ω” the correlation (when two are more individual effects are combined). The superscript denotes the individual effect(s) the parameter is associated with. Correlations must have a prior that confines them between -1 and 1.";

const corrlation_text = "This option determines if individual correlations are incorporated.\nIf unchecked it means that individual effects are uncorrelated across individuals.\nIf checked it means that correlations exist. Here a constant <b>A</b> matrix must be loaded from a file. This matrix can be loaded in a number of different ways:\n• <b>A matrix</b> – This is directly loaded by means of a file that has the individuals in the population in the column headers and a square matrix represented in a table.\n• <b>Inverse of A matrix</b> – This loads up the inverse of the relationship matrix by means of a file that has the individuals in the population in the column headers and a square matrix represented in the table.\n• <b>Pedigree</b> – A data table containing at least the following columns: “ID” a unique identifier for individuals, and “sire” and “dam” which give the names of the male and female parents (“.” is used if a parent is not in the data-set).\nMatrix <b>A</b> can also include IDs of individuals who do not appear in the compartmental model itself, and individual effect estimates can be made for these.";
 
const inf_uni_text = "This shows all the univariate parameters in the model that need to be specified with prior distributions. These priors must be set before inference can be performed.";

const inf_vector_text = "This shows all the parameter vectors in the model that need to be specified with prior distributions. These priors must be set before inference can be performed.\nThis can be done by clicking on the parameter name and either manually setting each one or loading a file with a vector of values (<i>e.g.</i> each containing a text prior specification such as “normal(0,3)”).";

const inf_matrix_text = "This shows all the parameter matrices in the model that need to be specified with prior distributions. These priors must be set before inference can be performed.\nThis can be done by clicking on the parameter name and either manually setting each one or loading a file with a matrix of values (<i>e.g.</i> each containing a text prior specification such as “normal(0,3)”).";

const inf_tensor_text = "This shows all the parameter tensors in the model that need to be specified with prior distributions. These priors must be set before inference can be performed.\nThis can be done by clicking on the parameter name and either manually setting each one or loading a file with the tensor element values (<i>e.g.</i> each containing a text prior specification such as “normal(0,3)”).";

const Amatrix_text = "The <b>A</b> matrix gives covariances that captures correlations between different individual effects in the population. It is a way of estimating genetic contributions to these effects.";
 
const seed_text = "Simulation and inference rely on pseudorandom number generators. These start with an initial value called a “seed”. If the seed option is turned off, this seed is randomly generated by the BICI interface (in which case BICI will produced different results each time it is run). If the seed is set, however, BICI will consistently give the same results. The seed can take any value between 0 and 10000.";

const diagnostic_text = "This provides diagnostic information about MCMC proposals.";

const chain_per_core_text = "More than one MCMC chain can be run on each core. This is computationally slower, but requires less memory.\nThe total number of chains must be a multiple of this quantity.";

const part_per_core_text = "More than one particle can be run on each core. This is computationally slower, but requires less memory.\nThe total number of particles must be a multiple of this quantity.";

const generations_text = "ABC-SMC and PAS-MCMC are algorithms which iteratively imrpove over a series of 'generations'.\nThese plots show how parameter values change over those generations (and convergence on the true posterior).";

// Stores all the comments (for testing purposes)
let all_comments = [annotation_text,class_text,species_text,smoothing_text,splines_text,knot_text,compartment_text,compartment_text2,trans_text,trans_text2,source_text,source_text2,sink_text,sink_text2,constant_text,reparam_text,derived_text, modelparam_text,initcond_text,pop_plot_text,param_plot_text,bayesfactor_text,trans_plot_text,ind_plot_text,ind_sing_plot_text,init_pop_text,add_pop_text,remove_pop_text,add_ind_text,rem_ind_text,move_ind_text,fixed_eff_text,add_param_mult_text,sim_text,start_sim_text,time_range_text,inf_time_range_text,acceptance_text,abcsmc_acceptance_text,kernel_text,sim_num_text,sim_timestep,ppc_num_text,param_sample_text,state_sample_text,data_text,modification_text,comp_data_text,trans_data_text,diag_test_data_text,pop_data_text,poptrans_data_text,seq_data_text,ind_eff_data_text,ind_group_data_text,load_tensor_text,load_reparam_text,load_priorsplit_text,load_distsplit_text,label_text,box_text,edit_anno_text,anno_text,setpop_text,setpopper_text,setmultipop_text,editsimparam_text,editconstparam_text,editamatrix_text,editxvector_text,editeqnparam_text,distribution_text, editprior_text,editpopprior_text,editprior_text2,search_text,boundary_text, editele_text,replace_text,order_text,deleterows_text,editcol_text,loadcomp_text,loadtrans_text,file_text,import_text,export_text, desc_text,eqn_text,example_text,run_local_text,sample_text,pas_sample_text,particle_text,gen_update_text,abc_sample_text,abc_gen_text,further_inf_text ,further_sim_text,further_post_sim_text,indmax_text,paramoutputmax_text,burnin_text,start_inf_text,inf_algorithm,fix_text,edittensor_text,editreparam_text,init_pop_text2,param_mult_text,initpopdist_text,editpriorsplit_text,editdistsplit_text,load_initpop_text,load_initpopdist_text,load_comp_text,load_compcol_text,load_comppos_text,load_compposcol_text,load_compmap_text,load_compartment_text,load_transition_text,load_population_text,load_poptrans_text,load_add_pop_text,load_remove_pop_text,load_tensor_text2,load_reparam_text2,load_priorsplit_text2,load_distsplit_text2,setderived_text,uniparam_text,paramvector_text,parammatrix_text,paramtensor_text,sim_uni_text,sim_vector_text,sim_matrix_text,sim_tensor_text,sim_ie_variance_text,inf_ie_variance_text,corrlation_text,inf_uni_text,inf_vector_text,inf_matrix_text,inf_tensor_text,Amatrix_text,seed_text,filter_text];

let all_comments_name = ["annotation_text","class_text","species_text","smoothing_text","splines_text","knot_text","compartment_text","compartment_text2","trans_text","trans_text2","source_text","source_text2","sink_text","sink_text2","constant_text","reparam_text","derived_text"," modelparam_text","initcond_text","pop_plot_text","param_plot_text","bayesfactor_text","trans_plot_text","ind_plot_text","ind_sing_plot_text","init_pop_text","add_pop_text","remove_pop_text","add_ind_text","rem_ind_text","move_ind_text","fixed_eff_text","add_param_mult_text","sim_text","start_sim_text","time_range_text","inf_time_range_text","acceptance_text","abcsmc_acceptance_text","kernel_text","sim_num_text","sim_timestep","ppc_num_text","param_sample_text","state_sample_text","data_text","modification_text","comp_data_text","trans_data_text","diag_test_data_text","pop_data_text","poptrans_data_text","seq_data_text","ind_eff_data_text","ind_group_data_text","load_tensor_text","load_reparam_text","load_priorsplit_text","load_distsplit_text","label_text","box_text","edit_anno_text","anno_text","setpop_text","setpopper_text","setmultipop_text","editsimparam_text","editconstparam_text","editamatrix_text","editxvector_text","editeqnparam_text","distribution_text"," editprior_text","editpopprior_text","editprior_text2","search_text","boundary_text"," editele_text","replace_text","order_text","deleterows_text","editcol_text","loadcomp_text","loadtrans_text","file_text","import_text","export_text"," desc_text","eqn_text","example_text","run_local_text","sample_text","pas_sample_text","particle_text","gen_update_text","abc_sample_text","abc_gen_text","further_inf_text ","further_sim_text","further_post_sim_text","indmax_text","paramoutputmax_text","burnin_text","start_inf_text","inf_algorithm","fix_text","edittensor_text","editreparam_text","init_pop_text2","param_mult_text","initpopdist_text","editpriorsplit_text","editdistsplit_text","load_initpop_text","load_initpopdist_text","load_comp_text","load_compcol_text","load_comppos_text","load_compposcol_text","load_compmap_text","load_compartment_text","load_transition_text,load_population_text","load_poptrans_text","load_add_pop_text","load_remove_pop_text","load_tensor_text2","load_reparam_text2","load_priorsplit_text2","load_distsplit_text2","setderived_text","uniparam_text","paramvector_text","parammatrix_text","paramtensor_text","sim_uni_text","sim_vector_text","sim_matrix_text","sim_tensor_text","sim_ie_variance_text","inf_ie_variance_text","corrlation_text","inf_uni_text","inf_vector_text","inf_matrix_text","inf_tensor_text","Amatrix_text","seed_text","filter_text"];
