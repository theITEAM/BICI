/// General purpose utility functions for all classes to use

#pragma once

using namespace std;

extern bool com_op;                            // Set to true for command line output

#include "struct.hh"
#include "equation.hh"

void emsg(const string &msg);
void emsg_input(const string &msg);
void end_code();
void display_error(const string &msg);
void display_warning(const string &msg);
string trim(string te);
string remove_prime(string te);
string remove_quote(string te);
vector <string> split(const string &s, char delimiter);
vector <string> split_with_bracket(const string &s, char delimiter);

string toLower(string st);
string toUpper(string st);
unsigned int find_in(const vector <unsigned int> &vec, const unsigned int val);
unsigned int find_in(const vector <double> &vec, const double val);
unsigned int find_in(const vector <string> &vec, const string val);
unsigned int find_in(const vector <string> &vec, const string val, unsigned int guess);
unsigned int find_in(string st1, string st2);
unsigned int find_in(const vector <bool> &vec, const bool val);
unsigned int integer(string st);
double number(string st);
double ran();
double normal_sample(const double mean, const double sd);
int normal_int_sample(double si);
double normal_probability(const double x, const double mean, const double sd);
double lognormal_sample(const double mean, const double cv);
double lognormal_probability(const double x, const double mean, const double cv); 
double lognormal_upper_probability(const double xmin, const double mean, const double cv);
double lognormal_upper_probability_no_log(const double xmin, const double mean, const double cv);
double weibull_sample(const double scale, const double shape);
double weibull_probability(const double x, const double scale, const double shape);
double weibull_upper_probability(const double xmin, const double scale, const double shape);
double weibull_upper_probability_no_log(const double xmin, const double scale, const double shape);
double gamma_sample(const double mean, const double cv);
double gamma_probability(const double x, const double mean, const double cv);
double gamma_upper_probability(const double xmin, const double mean, const double cv);
double gamma_upper_probability_no_log(const double xmin, const double mean, const double cv);
double beta_sample(const double alpha, const double beta);
double beta_probability(const double x, const double alpha, const double beta);
unsigned int poisson_sample(const double lam);
double poisson_probability(const int i, const double lam);
double poisson_upper_probability_no_log(const int imin, const double lam);
double neg_binomial_probability(const int i, const double mean, const double p);
unsigned int bernoulli_sample(const double p);
double bernoulli_probability(unsigned int x, const double p);
double exp_rate_sample(const double rate);
double exp_rate_probability(const double x, const double rate); 
double exp_rate_upper_probability(const double xmin, const double rate);
double exp_rate_upper_probability_no_log(const double xmin, const double rate);
double exp_mean_sample(const double mean);
double exp_mean_probability(const double x, const double mean);
double exp_mean_upper_probability(const double xmin, const double mean);
double exp_mean_upper_probability_no_log(const double xmin, const double mean);
double gamma_alpha_sample(const double alpha);
double gamma_alpha_probability(const double x, const double alpha);
unsigned int binomial_sample(double p, unsigned int n);
double binomial_probability(unsigned int num, double p, unsigned int n);
double period_sample(const double time);
double period_probability(const double x, const double time);
double period_upper_probability(const double x, const double time);
double rectify(double val);
bool equal_vec(const vector <string> &vec1, const vector <string> &vec2);
bool equal_vec(const vector <unsigned int> &vec1, const vector <unsigned int> &vec2);
bool equal_vec(const vector <bool> &vec1, const vector <bool> &vec2);
string stringify(const vector <EquationInfo> &value, const vector <Dependency> &dep);
bool includes(string st, string ch);
DepInfo get_dep_info(const string &te, unsigned int i, const string &not_allowed);
bool str_eq(const string &te, unsigned int i, const string &te2);
SwapResult swap_index(string &te, const vector <DepConv> &dep_conv);
SwapResult swap_template(string te, const vector <DepConv> &dep_conv);
string swap_index_temp(const vector <DepConv> &dep_conv, const SwapResult &temp);
ParamProp get_param_prop(string st);
unsigned int add_to_vec(vector <unsigned int> &vec, unsigned int val);
unsigned int add_to_vec(vector <ParamRef> &vec, unsigned int th, unsigned int index);
void print(string name, const vector <double> &vec);
unsigned int get_core();
void print_diag(string te);
void print(string name, const vector <unsigned int> &vec);
void printsm(string name, const vector <double> &vec);
void print(string name, const vector < vector <double> > &vec);
void print(string name, const vector < vector <unsigned int> > &mat);
void print(string name, const Table &tab);

bool dif(double a, double b, double thresh);
bool dif(const vector <double> &a, const vector <double> &b, double thresh);
unsigned int which_dif(const vector <double> &a, const vector <double> &b, double thresh);
bool dif(const vector < vector <double> > &a, const vector < vector <double> > &b, double thresh);
vector <unsigned int> which_dif(const vector < vector <double> > &a, const vector < vector <double> > &b, double thresh);
bool difi(unsigned int a, unsigned int b);
bool difi(const vector <unsigned int> &a, const vector <unsigned int> &b);
bool difi(const vector < vector <unsigned int> > &a, const vector < vector <unsigned int> > &b);
string replace(string st, string st1, string st2);
void remove_cr(string &st);
bool is_percent(string val);
string get_param_name_with_dep(const Param &par, const vector <Dependency> &dep, unsigned int index);
void param_vec_add_affect(vector <AffectLike> &vec, const AffectLike &al);
double sum(const vector <double> &vec);
double sum(const vector < vector <double> > &mat);
unsigned int sum(const vector <unsigned int> &vec);
double sum_mult(const vector < vector <double> > &M1, const vector < vector <unsigned int> > &M2);
double mean(const vector <double> &val);
double min(const vector <double> &val);
double max(const vector <double> &val);
unsigned int max(const vector <unsigned int> &val);
unsigned int min(const vector <unsigned int> &val);
int round_int(double val);
int floor_int(double val);
vector <int> round_int(const vector <double> &val);
string cpu_percent(long time, long total_time);
string tstr(double value);
unsigned int core();
unsigned int num_core();
bool op();
vector <unsigned int> seq_vec(unsigned int N);
vector <bool> true_vec(unsigned int N);
string get_affect_name(AffectType type);
Prior convert_text_to_prior(string te, unsigned int line_num, bool dist);
string get_prior_string(Prior prior);
void init_log_sum();
double factorial(unsigned int n);
double choose(unsigned int N, unsigned int r);
double log_int(unsigned int n);
vector <double> dirichlet_sample(const vector <double> &alpha);
double dirichlet_probability(const vector <double> &frac, const vector <double> &alpha);
vector <unsigned int>  multinomial_sample(unsigned int N_total, const vector <double> &frac);
double multinomial_probability(unsigned int N_total, const vector <unsigned int> &x, const vector <double> &frac);
double multinomial_samp_probability(const vector <unsigned int> &x, const vector <double> &frac);
unsigned int get_event_before(unsigned int e, const vector <Event> &ev);
unsigned int get_event_after(unsigned int e, const vector <Event> &ev);
double get_log_zero_one(double val);
void set_seed(const int core, const Details &details, unsigned int seed_tag);
void check_bp(double &bp);
double nm_trans_like(TransType type, double dt, const vector <double> &ref_val);
vector <string> comma_split(string te);
unsigned int get_op_step(unsigned int nnumber);
vector <unsigned int> true_list(const vector <bool> &vec);	
vector <unsigned int> false_list(const vector <bool> &vec);
vector <unsigned int> combine(const vector <unsigned int> &vec1, const vector <unsigned int> &vec2);	
bool begin_str(string st, string st2);
bool end_str(string st, string st2);
string check_thresh(DistText dist, DistQuant dq, double val, bool err);
bool events_near_div(const vector <Event> &ev, const Details &details);
bool event_near_div(double t, const Details &details);
string trunc(string te, unsigned int len);
vector< vector <string> > get_escape_char();
string add_escape_char(string te);
string replace_arrow(string te);
void percentage(double val, double val2);
void percentage_start(PercentType type, unsigned int gen=UNSET);
void percentage_end();	
	
// In utils_eqn.cc
EquationInfo add_equation_info(string _te, EqnType _type, unsigned int _p = UNSET, unsigned int _cl = UNSET);
string check_valid_name(string name, string type);
string basic_equation_check(string &te);
string check_brackets_match(string te);
string check_chnotallowed(string te);
unsigned int param_end(const string &st, unsigned int i, string &emsg);
Poss sample_possibility(const vector <Poss> &pos);
double sample_probability(unsigned int i, const vector <Poss> &pos);
string trunc(const string &str);
double indfac(const Individual &ind);
double prior_probability(double x, const Prior &pri, const vector <double> &param_val,const vector <Equation> &eqn);
void add_on_like(const Like li1, Like &li2);
double calc_al(const Like &like_ch, double dprob, const BurnInfo &burn_info);
void print_like(const Like &like);
void print(string te);
void print(double num, string te);

/// In utils_check
void test_distribution();
void generate_data();
void simulate_trans_exp();
void test_incomplete_distribution();
